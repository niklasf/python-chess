from copy import copy
import math
import xml.etree.ElementTree as ET

import chess

from typing import Dict, Optional, Self, Tuple, Union, List
from chess import Color, Square

SQUARE_SIZE = 45
MARGIN = 20
NAG_SIZE = 20
POSITION_OFFSET = SQUARE_SIZE - NAG_SIZE
CORNER_OFFSET = NAG_SIZE/2

PIECES = {
  "b": ET.fromstring("""<g transform="scale(0.25)" id="black-bishop"><path fill="#7f7874" d="M87.82,16.94a12.94,12.94,0,0,0-9.5,21.73A107,107,0,0,0,63.84,52.91C53,65.83,47.3,79.41,47.3,92.18c0,20.8,9.43,33.35,16.42,39.19-2.32.21-4.52.44-6.63.71-19.24,2.45-19.21,12.78-19.18,24.74v3.63H139.48v-3.63c0-12,.06-22.29-19.17-24.74-2.11-.27-4.31-.5-6.63-.71,7-5.84,16.42-18.39,16.42-39.19,0-20.46-13.49-35.94-22.13-44.54l-1.82-1.82L104.84,48c-1.5,2.53-8.82,14.46-9.13,44.61H82c.48-45,18-62,18.18-62.16l.65-.65-.07-.91a13,13,0,0,0-12.9-12Z"/> <path style="opacity:0.2;" d="M115.68,57.6c22.72,55.13-27.07,71.83-27.07,71.83l25.07,1.94c-2.44,1.85,16-5.24,16-41.36A43.76,43.76,0,0,0,115.68,57.6Z"/> <path style="opacity:0.2;fill:#fff;" d="M81.45,38.77c-2.67-1.22-28.61,20.58-32.9,42.92-4,20.81,3.2,26.56,2.77,26.39,0-.13,2.78-45.8,32.83-68.11C84.15,40,83,39.47,81.45,38.77Z"/> <path style="opacity:0.2;fill:#fff;" d="M89.65,18.84c-4.34.39-11.78,6.67-12.4,15.35,0,0-6-5.57.06-12.49C82.05,16.24,89.65,18.84,89.65,18.84Z"/> <path style="opacity:0.2;fill:#fff;" d="M88.7,138.41c43.07,0,47.54,4.75,47.54,4.75h.59c-1.93-10.18-24.5-11.3-24.5-11.3H65.23s-23.36.81-24.66,11.3h.59S45.63,138.41,88.7,138.41Z"/> <path style="opacity:0.2;" d="M86.73,57c1.84-5.06,14.08-29,14.08-29l-5.54-9.19-2.87.06c9.19,11.26-18,37-18,56.43,0,5.69,1.39,17.22,5.53,19.31C80,94.65,82.91,67.54,86.73,57Z"/> <path fill="#1a1a1a" d="M87.82,18.94A10.94,10.94,0,0,1,98.73,29.07S80,46.81,80,94.65H97.7c0-29.93,7-42.36,8.86-45.59,9.46,9.42,21.54,24,21.54,43.12,0,26.23-15.31,38.41-20.33,40.76,4.33.27,8.43.63,12.29,1.12,18.25,2.33,17.42,11.29,17.42,24.39H39.92c0-13.1-.83-22.06,17.42-24.39,3.85-.49,8-.85,12.29-1.12-5-2.35-20.33-14.53-20.33-40.76,0-30.08,32.15-53.41,32.15-53.41a10.94,10.94,0,0,1,6.37-19.83m0-4A14.93,14.93,0,0,0,75.54,38.37,109.36,109.36,0,0,0,62.31,51.63c-11.13,13.28-17,27.3-17,40.55,0,18.39,7.2,30.63,13.88,37.63l-2.35.29c-21,2.67-20.95,14.35-20.92,26.73v5.62H141.48v-5.62c0-12.38.07-24.06-20.92-26.73-.77-.1-1.55-.2-2.34-.28,6.68-7,13.88-19.25,13.88-37.64,0-15.71-7.43-30.74-22.72-46l-3.65-3.63L103.12,47c-5.76,9.76-9,24.78-9.38,43.63H84c.5-21.46,5-36,8.75-44.55,4.32-9.79,8.7-14.09,8.74-14.13l1.35-1.3-.12-1.88a15,15,0,0,0-14.9-13.85Z"/> <path fill="#1a1a1a" d="M88.7,132.41c9,0,17.15.28,24.57.93l1.91-3.84c-7.68-.73-16.4-1.09-26.48-1.09h0c-10.19,0-19,.36-26.73,1.11l1.18,3.91C70.83,132.72,79.34,132.41,88.7,132.41Z"/></g>"""),
  "k": ET.fromstring("""<g transform="scale(0.25)" id="black-king"><path fill="#7f7874" d="M149.17,61.56a31.76,31.76,0,0,0-23-9.27c-11.63,0-19.33,3.41-23.56,6.06L99.67,45.52h11.68v-18h-12v-12h-18v12h-12v18H81L78.1,58.35c-4.22-2.65-11.93-6.06-23.55-6.06a31.75,31.75,0,0,0-23,9.27c-5.87,6-9.1,14.48-9.1,23.86,0,13.61,8.68,22.27,17.08,30.65,5.17,5.15,10.49,10.46,14,17-14,3.54-13.92,13-13.9,23.79v3.6H141.13v-3.6c0-10.82.05-20.25-13.89-23.79,3.45-6.53,8.78-11.84,13.94-17,8.4-8.38,17.09-17,17.09-30.65C158.27,76,155,67.57,149.17,61.56ZM128.51,89c-.92,6.43-10.42,12.08-16.78,20.2-3.2-.21-5.17-.38-7.87-.49V83.74s8-5.71,14.43-5.71C118.29,78,130,78.44,128.51,89ZM62.49,78c6.44,0,14.43,5.71,14.43,5.71v24.92c-2.71.11-4.67.28-7.87.49C62.68,101,53.19,95.38,52.27,89,50.77,78.44,62.49,78,62.49,78Z"/> <polygon style="opacity:0.3;fill:#fff;" points="111.35 31.52 95.39 31.52 98.39 28.29 111.35 28.29 111.35 31.52"/> <polygon style="opacity:0.3;fill:#fff;" points="95.35 19.52 85.35 19.52 85.35 31.52 73.35 31.52 73.35 41.52 69.35 45.52 69.35 27.52 81.35 27.52 81.35 15.53 99.35 15.53 95.35 19.52"/> <path style="opacity:0.2;fill:#fff;" d="M90.35,138.41c43.07,0,47.54,4.75,47.54,4.75h.59c-1.94-10.18-24.5-11.3-24.5-11.3H66.88s-23.36.81-24.66,11.3h.59S47.28,138.41,90.35,138.41Z"/> <path style="opacity:0.2;fill:#fff;" d="M64.07,54.82S42.88,47.58,29.8,63.54c-18.12,22.1,2.35,43.09,2.35,43.09C18.85,82.28,33.32,53.46,64.07,54.82Z"/> <path style="opacity:0.2;" d="M144.56,101.34l-29.69,29.78,12.37,1.94a96.69,96.69,0,0,1,15.24-18.69c9.87-9.5,15.77-15.91,15.77-31.56,0-11.49-5.79-16.61-10.95-20.77C147.3,62,159.81,86.09,144.56,101.34Z"/> <path fill="#1a1a1a" d="M62.41,79.79a19.36,19.36,0,0,1,11.94,4.63v22.44l-4.95.28C66.81,104.05,64.29,101.4,62,99c-4.8-5-8.27-8.69-8.27-12,0-5.33,4.47-7.23,8.65-7.23m0-4c-7,0-12.65,4.06-12.65,11.23s8.81,13,17.84,24.22c0,0,8.3-.47,10.75-.57V82.61a23.74,23.74,0,0,0-15.94-6.82Z"/> <path fill="#1a1a1a" d="M90.35,132.41a252.6,252.6,0,0,1,31.36,1.65,43.48,43.48,0,0,1,5.16,1l.67-4a46.89,46.89,0,0,0-5.33-1,254,254,0,0,0-31.86-1.69h0a254.29,254.29,0,0,0-31.87,1.69,47.37,47.37,0,0,0-5.58,1l.83,3.91a42.45,42.45,0,0,1,5.26-1A252.6,252.6,0,0,1,90.35,132.41Z"/> <path fill="#1a1a1a" d="M97.35,17.52v12h12v14h-12l3.75,16.63a56,56,0,0,1,25.05-5.86c17.4,0,30.12,12.73,30.12,31.13,0,21.75-23.46,29.87-31.94,49.05,15.53,2.84,14.8,11.54,14.8,24H41.57c0-12.44-.74-21.14,14.8-24-8.49-19.18-31.94-27.3-31.94-49,0-18.4,12.72-31.13,30.12-31.13a58.23,58.23,0,0,1,25,5.58l3.75-16.35h-12v-14h12v-12h14m4-4h-22v12h-12v22h11L76.77,54.3a64.5,64.5,0,0,0-22.22-4c-19.77,0-34.12,14.78-34.12,35.13,0,14.44,9,23.4,17.67,32.06,4.47,4.46,9.06,9,12.36,14.37-5.23,1.78-8.67,4.62-10.67,8.74-2.26,4.63-2.24,10-2.23,16.26v5.6H143.13v-5.6c0-10.57.06-20.62-12.89-25,3.29-5.33,7.89-9.91,12.36-14.37,8.68-8.66,17.67-17.62,17.67-32.06,0-20.35-14.35-35.13-34.12-35.13a62.21,62.21,0,0,0-22.23,4.2l-1.57-7h11v-22h-12v-12Z"/> <path fill="#1a1a1a" d="M118.28,79.79c4.19,0,8.65,1.9,8.65,7.23,0,3.32-3.46,7-8.26,12-2.27,2.37-4.79,5-7.38,8.11l-4.94-.28V84.42a19.31,19.31,0,0,1,11.93-4.63m0-4a23.72,23.72,0,0,0-15.93,6.82v28.06c2.45.1,10.74.57,10.74.57,9-11.2,17.84-16.92,17.84-24.22s-5.62-11.23-12.65-11.23Z"/></g>"""),
  "n": ET.fromstring("""<g transform="scale(0.25)" id="black-knight"> <path fill="#7f7874" d="M73.07,20.25h-.83c-2.72,0-5.43,2.48-6.16,5.64l-1.45,6.88c-1.32,3.14-3.54,5.36-7.13,8.32a19.11,19.11,0,0,0-6.06,8.69l-.17.42c-.9,2.29-1.56,4.3-2.16,6.07A43.59,43.59,0,0,1,43,69.12L31.37,85.5c-3.62,4.51-3.22,10.76.92,14.27s14.4,6.3,17.9,6.3a3.37,3.37,0,0,0,2.42-.78,24.78,24.78,0,0,0,3.7-4.85c2.31-3.6,4-6.2,9.93-6.23,8.73,0,16.28-7.95,19.91-11.76l0,0,0,0,2.18-2.52c1.46,2.33,3.14,6.13,2,10.11a16.46,16.46,0,0,1-2.3,4.79,40.35,40.35,0,0,1-8,8l-.19.16c-7.52,6.08-20,16.15-22.08,30.28-13.33,3.64-13.3,12.93-13.27,23.62v3.61H146.1v-3.6c0-10.69.06-20-13.28-23.63.41-1.59,1-3.64,1.64-5.9,2.63-9.24,6.24-21.9,6.24-30.2,0-19.56-6.19-36-17.89-47.47A59,59,0,0,0,86.05,33.21L73.66,20.84l-.59-.59Z"/> <path style="opacity:0.2;fill:#fff;" d="M95.71,138.41c43.07,0,47.54,4.75,47.54,4.75h.59c-1.93-10.18-24.49-11.3-24.49-11.3H72.24s-23.36.81-24.66,11.3h.59S52.64,138.41,95.71,138.41Z"/> <g style="opacity:0.2;"> <path fill="#fff" d="M69.64,40.21c8.06-5,2.6-18,2.6-18a5,5,0,0,0-5,4l-1.46,6.92c-1.41,3.38-3.71,5.7-7.46,8.8a18,18,0,0,0-5.76,8.26l-.16.42c-.89,2.26-1.52,4.17-2.14,6a44.74,44.74,0,0,1-6.22,13.1L32.42,86.14c-.15.15-.3.31-.44.47a6,6,0,0,0-1,7.74S50,70.9,52.49,67.61C57,61.63,54.16,49.84,69.64,40.21Z"/> </g> <path fill="#1a1a1a" d="M70.78,49.77c-5.23,2.14-6.64,11.09-6.64,11.09,5.08-4.42,7.53.65,12.59-3.36C81,54.16,75.9,47.67,70.78,49.77Z"/> <path style="opacity:0.2;" d="M94.87,66.07c-1.82,3.49-6.33,10.57-6.33,10.57s-.47,1.43-1.05,3.46c0,0,2.08-.23,2.47,6.39.1,1.72.93,7.76,2,5.18C95,84.23,97.14,75.23,97.1,72.18S96.68,62.58,94.87,66.07Z"/> <path style="opacity:0.2;" d="M85.17,35.15S126,40.22,126,79.26c0,26.14-17.38,33.44-22,51,0,0,19.33.15,27.88,4.19,0,0,9.18-24.84,9.18-39.56C141.05,79.83,129.61,34,85.17,35.15Z"/> <path style="opacity:0.2;" d="M70.12,92.2c-9.11-4.47-11.41-9.79-14.91.72-3.4,10.18-8.55,11.93-5.09,13s7.74-10.45,10.77-10.64S73.53,93.87,70.12,92.2Z"/> <path fill="#1a1a1a" d="M72.24,22.25l12.93,12.9c25.26,1.71,53.53,20.1,53.53,62,0,11.12-7,31.49-8.29,37.57,14.39,3.05,13.69,11.63,13.69,23.76H46.54c0-12-.68-20.47,13.08-23.63C61,120.66,74,110.31,81.34,104.33a41.62,41.62,0,0,0,8.41-8.44,18.34,18.34,0,0,0,2.57-5.37c1.82-6.37-2.3-12.09-3.78-13.88l-3.83,4.43C80.85,85.12,74,92.18,66.23,92.21c-10.05.05-10.29,7.09-15,11.65a1.69,1.69,0,0,1-1,.21c-3.27,0-12.92-2.68-16.61-5.82-3.22-2.74-3.64-7.82-.62-11.54l11.7-16.46c5.23-7.6,5.46-11.65,8.48-19.32a17.36,17.36,0,0,1,5.64-8.3c3.81-3.15,6.28-5.61,7.77-9.27l1.48-7c.5-2.16,2.39-4.09,4.21-4.09m1.66-4H72.24c-3.68,0-7.16,3.09-8.11,7.19v.08l-1.39,6.64c-1.18,2.68-3.14,4.62-6.49,7.39a20.82,20.82,0,0,0-6.66,9.51l-.16.41c-.92,2.34-1.6,4.37-2.19,6.17A41.6,41.6,0,0,1,41.38,68L29.77,84.3C25.52,89.65,26,97.09,31,101.3c4.6,3.91,15.36,6.77,19.2,6.77A5.36,5.36,0,0,0,54,106.73a27.63,27.63,0,0,0,4-5.21c2.18-3.41,3.38-5.28,8.25-5.31,9.58,0,17.53-8.37,21.35-12.38l.07-.07.06-.07L88,83.4a9.35,9.35,0,0,1,.49,6,14.14,14.14,0,0,1-2,4.21,38.38,38.38,0,0,1-7.63,7.59l-.19.16c-7.53,6.1-19.83,16.06-22.58,30.27-5.78,1.84-9.58,5-11.57,9.54s-2,9.68-1.94,15.66v5.6H148.1v-5.6c0-6.07,0-11.32-2-15.88-2-4.32-5.44-7.28-10.8-9.1.33-1.2.71-2.56,1.13-4,2.66-9.36,6.31-22.17,6.31-30.75C142.7,55,115,33.84,87,31.28L75.07,19.42,73.9,18.25Z"/> <path fill="#1a1a1a" d="M95.71,132.41a252.5,252.5,0,0,1,31.36,1.65,43.67,43.67,0,0,1,5.17,1l.66-4a46.29,46.29,0,0,0-5.32-1,254.17,254.17,0,0,0-31.87-1.69h0a254,254,0,0,0-31.86,1.69,47,47,0,0,0-5.58,1l.82,3.91a42.8,42.8,0,0,1,5.26-1A252.6,252.6,0,0,1,95.71,132.41Z"/></g>"""),
  "p": ET.fromstring("""<g transform="scale(0.25)" id="black-pawn"><path fill="#7f7874" d="M89.94,41.92a23,23,0,0,0-14.24,41L63.79,90.75l-.9.59v1.08a12.17,12.17,0,0,0,2,6.93l.39.72.57,1.05H77.13c-.49,5.61-2,19.66-20,31-8,5-12.66,14.66-12.66,26.36v2h91v-2c0-11.7-4.62-21.31-12.67-26.36-17.94-11.28-19.5-25.36-20-31H114l.57-1.05.39-.72a12.17,12.17,0,0,0,2-6.93V91.34l-.9-.59-11.91-7.86a23,23,0,0,0-14.24-41Z"/> <path style="opacity:0.2;" d="M115.16,127.11c-10.76-7.52-11.49-22.19-12.18-25.54l10.85,0,3.87-9s-11.41-9.29-17-9.46l2.75,0s8.21-6.84,8.92-12.88C115.25,46.21,96.3,43,96.3,43c8.58,4.29,15.07,18.92,7.34,29.82C98.12,80.61,87.34,83,87.34,83h13.3c.16.14,9.38,10-.1,16.16H65.12l.45,2.5,11.45,0S90.26,115,101.23,125.37c10.53,9.93,26.51,11.31,26.51,11.31S120.63,130.94,115.16,127.11Z"/> <path style="opacity:0.2;fill:#fff;" d="M75,92.42C75.6,88,79.14,83,79.24,83L62.47,92.42Z"/> <path style="opacity:0.2;fill:#fff;" d="M92.05,44c-8,.72-20.82,10.3-22.32,30,0,0-8.08-11.62,3.06-24.45C81.56,39.5,92.05,44,92.05,44Z"/> <path style="opacity:0.2;fill:#fff;" d="M46.45,158.45C50.8,144.15,57,142.3,68.3,134c7.54-5.48,8.55-22,8.55-22,.18-.86-3.84,6.67-8.12,10.4-1.41,1.22-11,7.84-15.07,12.17C46.55,142.07,45.61,161.19,46.45,158.45Z"/> <path fill="#1a1a1a" d="M89.94,43.92a21,21,0,0,1,11.79,38.29l-1.09.75L115,92.42c0,3.06-.72,4-2.15,6.7h-12.3l.1,1c.49,4.57.8,20.93,21.06,33.66,7.45,4.68,11.73,13.68,11.73,24.67h-87c0-11,4.27-20,11.73-24.67,20.3-12.76,20.58-29.1,21.06-33.66l.1-1H67c-1.42-2.65-2.15-3.64-2.15-6.7L79.24,83l-1.09-.74a21,21,0,0,1,11.79-38.3m0-4A25,25,0,0,0,72.42,82.66l-9.73,6.42-1.8,1.19v2.15a14.13,14.13,0,0,0,2.24,7.89l.39.71,1.13,2.1H74.88c-2.49,17-14.27,24.41-18.83,27.27-8.65,5.43-13.6,15.66-13.6,28.06v4h95v-4c0-12.4-5-22.63-13.6-28.06-15.11-9.49-18-21-18.86-27.27h10.26l1.13-2.1.39-.71A14.13,14.13,0,0,0,119,92.42V90.27l-1.8-1.19-9.73-6.42A25,25,0,0,0,89.94,39.92Z"/></g>"""),
  "q": ET.fromstring("""<g transform="scale(0.25)" id="black-queen"><path fill="#7f7874" d="M111.12,20.62A14.63,14.63,0,0,0,96.51,35.23a13.92,13.92,0,0,0,5.41,10.93L90.54,79,79.15,46.16a13.92,13.92,0,0,0,5.41-10.93A14.63,14.63,0,0,0,70,20.62,14.46,14.46,0,0,0,55.34,35.23a13.67,13.67,0,0,0,9.22,13.16L62.73,87.11,47,70.32a13.77,13.77,0,0,0,2.25-6.95A14.22,14.22,0,0,0,35.45,49.43,13.9,13.9,0,0,0,21.51,63.37c0,6.6,5.45,12.86,11.57,13.69l23.06,55.46c-16.44,3.06-16.42,12.95-16.39,24.31v3.62H141.32v-3.61c0-11.37.06-21.26-16.39-24.32L148,77.06c6.13-.83,11.58-7.09,11.58-13.69a14,14,0,0,0-13.95-13.94,14.22,14.22,0,0,0-13.78,13.94,13.64,13.64,0,0,0,2.26,6.95L118.35,87.11l-1.83-38.73a13.88,13.88,0,0,0,9.21-13.15,14.45,14.45,0,0,0-14.61-14.61Z"/> <path style="opacity:0.2;" d="M40.24,52.34c5.31,6.79-3.85,12.82,1.26,18.34L64.72,92.17l-17.4-23s2.2-5.64.81-9.8C45,50,40.24,52.34,40.24,52.34Z"/> <path style="opacity:0.2;fill:#fff;" d="M38.42,51.33c-4.81.45-12.22,5.85-13.92,16.84-.13.79-5.49-5,1.6-13.2C31.69,48.47,38.42,51.33,38.42,51.33Z"/> <path style="opacity:0.2;fill:#fff;" d="M148.84,51.33c-4.8.45-12.22,5.85-13.92,16.84-.12.79-5.48-5,1.61-13.2C142.11,48.47,148.84,51.33,148.84,51.33Z"/> <path style="opacity:0.2;fill:#fff;" d="M72.54,22.75c-5.14.53-13.22,6.79-14,19.44,0,0-5.29-7.36,1.72-15.68C65.78,20,72.54,22.75,72.54,22.75Z"/> <path style="opacity:0.2;fill:#fff;" d="M113.44,22.75c-5.14.53-13.22,6.79-14,19.44,0,0-5.28-7.36,1.72-15.68C106.69,20,113.44,22.75,113.44,22.75Z"/> <path style="opacity:0.2;fill:#fff;" d="M91.12,138.41c43.07,0,47.54,4.75,47.54,4.75h.59c-1.93-10.18-24.5-11.3-24.5-11.3H67.65s-23.36.81-24.66,11.3h.59S48.05,138.41,91.12,138.41Z"/> <path style="opacity:0.2;" d="M116.2,112.83c-15.74,17-31.38,16.5-31.38,16.5l39.74,3.1,23.31-55.11s5.42-.62,9.46-7.34c6-9.94-5.53-17.09-5.53-17.09,3.61,4.19,3.08,11.15,0,14s-7.86,3.31-9.69,7.48C142.15,74.36,131.22,96.58,116.2,112.83Z"/> <path style="opacity:0.2;" d="M116.83,23.36c7.64,10.53-6.88,14-6,23.56l5.75,45,0-43s10.08-6.11,9.18-13.42C124.37,24,116.83,23.36,116.83,23.36Z"/> <path style="opacity:0.2;" d="M72.69,45.45,90.54,85.1,79.16,46.49s4.35-6.34,4.35-11.81c0-10.06-8.45-12-8.45-12C83.19,33.57,69.51,35.91,72.69,45.45Z"/> <path fill="#1a1a1a" d="M145.63,47.43c-8.41,0-15.79,7.45-15.79,15.94A14.77,14.77,0,0,0,131.62,70l-11.5,12.26-1.54-32.58a16,16,0,0,0,9.15-14.48,16.43,16.43,0,0,0-16.61-16.61A16.63,16.63,0,0,0,94.51,35.23,16,16,0,0,0,99.58,46.8l-9,26.09L81.49,46.8a16,16,0,0,0,5.07-11.57A16.63,16.63,0,0,0,70,18.62,16.44,16.44,0,0,0,53.34,35.23,15.75,15.75,0,0,0,62.5,49.74L61,82.29,49.45,70a14.71,14.71,0,0,0,1.78-6.66c0-8.49-7.37-15.94-15.78-15.94A16,16,0,0,0,19.51,63.37,16.34,16.34,0,0,0,31.65,78.84l21.72,52.23c-15.68,3.87-15.65,14.54-15.62,25.77v5.61H143.32v-5.61c0-11.24.06-21.9-15.62-25.77l21.72-52.23a16.34,16.34,0,0,0,12.15-15.47A16,16,0,0,0,145.63,47.43Zm-6.31,111H41.76c0-13-.82-22,17.2-24.35l.58-.09a257.11,257.11,0,0,1,31.58-1.6,243.81,243.81,0,0,1,31,1.69C140.13,136.46,139.32,145.4,139.32,158.45Zm7.3-83.29-22.89,55-.75-.1a254,254,0,0,0-31.86-1.69A259,259,0,0,0,59,130c-.57.07-1.12.15-1.66.24L34.46,75.16c-5.48,0-10.95-5.65-10.95-11.79A11.89,11.89,0,0,1,35.45,51.43,12.2,12.2,0,0,1,47.23,63.37c0,3.72-2.82,7.14-2.82,7.14L64.5,91.92l2.14-45.07a11.61,11.61,0,0,1-9.3-11.62A12.41,12.41,0,0,1,70,22.62a12.6,12.6,0,0,1,12.6,12.61,11.85,11.85,0,0,1-5.8,10.12L90.54,85.1l13.78-39.75a11.86,11.86,0,0,1-5.81-10.12,12.61,12.61,0,0,1,12.61-12.61,12.4,12.4,0,0,1,12.61,12.61,11.72,11.72,0,0,1-9.29,11.62l2.14,45.07,20.08-21.41s-2.82-3.4-2.82-7.14a12.2,12.2,0,0,1,11.79-11.94,11.89,11.89,0,0,1,11.94,11.94C157.57,69.51,152.1,75.16,146.62,75.16Z"/></g>"""),
  "r": ET.fromstring("""<g transform="scale(0.25)" id="black-rook"><path fill="#7f7874" d="M90,30.87a92.56,92.56,0,0,0-10.56.85l-1.45.2-.25,1.44L74.87,50.28H70L64.84,35.53l-.47-1.34H63a31.07,31.07,0,0,0-14.88,3.72l-1.15.62.1,1.31L48.68,60v.1c1,7.21,4.68,11.7,11.93,14.38-1,8.58-5.74,48.89-6.95,58.44-14.51,3.42-14.49,12.94-14.46,23.92v3.62H140.78v-3.62c0-11,.06-20.5-14.46-23.92-1.2-9.55-5.94-49.86-6.95-58.44,7.26-2.68,11-7.17,11.94-14.38V60L133,39.84l.11-1.31-1.15-.62A31.08,31.08,0,0,0,117,34.19h-1.41l-.47,1.34L110,50.28h-4.85l-2.87-16.92L102,31.92l-1.45-.2A92.56,92.56,0,0,0,90,30.87Z"/> <path style="opacity:0.2;fill:#fff;" d="M90,138.41c43.07,0,47.54,4.75,47.54,4.75h.59c-1.93-10.18-24.49-11.3-24.49-11.3H66.53s-23.36.81-24.66,11.3h.59S46.93,138.41,90,138.41Z"/> <path style="opacity:0.3;fill:#fff;" d="M60,34.43c-10.75,7.36-6.7,34.9-6.7,34.9-6.85-2.21-6.7-31.73-6.7-31.73S63.08,32.34,60,34.43Z"/> <path style="opacity:0.3;fill:#fff;" d="M93.18,32.26c-12,2.19-16.62,19.64-16.62,19.64.8-13,3.52-20.54,3.52-20.54S96.59,31.63,93.18,32.26Z"/> <path style="opacity:0.3;fill:#fff;" d="M125.15,35.88c-7.77,4.11-13.75,16-13.75,16-.44-4.24,5.47-19,5.47-19S128.05,34.35,125.15,35.88Z"/> <path style="opacity:0.2;" d="M123.87,72.17c10.62.24,8.73-32.78,8.73-32.78l-6.36-4c-1.76,10.55-4,26.9-9.16,31.43-4.71,4.15-7.59,5.12-8.31,5.3-1.37-.17-2.83-.33-4.43-.47-14.5-1.32-35.6,2.82-35.6,2.82s21.37-1.3,32.3,12.42,12,43.37,12,43.37c7.16,1.33,12.49,2.8,12.49,2.8l-6.73-57.46S122.46,72.14,123.87,72.17Z"/> <path fill="#1a1a1a" d="M140.65,140.76c-2.2-4.67-6.21-7.71-12.51-9.45-1.35-10.88-5.36-45-6.6-55.54,7.06-3,10.73-7.87,11.75-15.41v-.21L135,40l.21-2.61-2.3-1.24a33.05,33.05,0,0,0-15.84-4h-3.19l-.71,3.12-2.93,13H105l-1.74-15-.35-3-3-.49A72.25,72.25,0,0,0,90,28.87a72.06,72.06,0,0,0-9.94.88l-3,.49-.35,3L75,48.28h-5.2l-2.93-13-.71-3.12H63a33,33,0,0,0-15.83,4l-2.3,1.24L45,40l1.66,20.15v.21c1,7.54,4.68,12.39,11.75,15.41-1.24,10.54-5.26,44.66-6.6,55.54-6.31,1.74-10.32,4.78-12.51,9.45s-2.15,9.91-2.14,16.07v5.62H142.78v-5.62C142.8,150.68,142.81,145.36,140.65,140.76Zm-90-80.94L49,39.67A28.93,28.93,0,0,1,63,36.19L66.6,52.28h12L80.71,33.7A67.28,67.28,0,0,1,90,32.87a67.28,67.28,0,0,1,9.29.83l2.15,18.58h12L117,36.19A29,29,0,0,1,131,39.67l-1.66,20.15c-.77,5.74-3.29,10-10.52,12.73A234.34,234.34,0,0,0,90,70a234.67,234.67,0,0,0-28.8,2.54C54,69.84,51.45,65.56,50.67,59.82Zm11.74,16.6A231,231,0,0,1,90,74a230.47,230.47,0,0,1,27.59,2.41c1.21,10.31,4.93,41.88,6.41,54-.69-.12-1.4-.23-2.14-.32A254,254,0,0,0,90,128.41a254,254,0,0,0-31.86,1.69c-.75.09-1.45.2-2.14.32C57.48,118.3,61.2,86.73,62.41,76.42Zm76.37,82H41.22c0-11.85-.67-20.31,12.69-23.53l.34-.09,1-.21c1-.22,2.16-.4,3.37-.56A252.6,252.6,0,0,1,90,132.41a252.6,252.6,0,0,1,31.36,1.65c1.18.15,2.28.34,3.31.54l1.1.24.23,0C139.45,138.1,138.78,146.58,138.78,158.45Z"/></g>"""),
  "B": ET.fromstring("""<g transform="scale(0.25)" id="white-bishop"><path fill="#f9f9f9" d="M87.82,16.94a12.94,12.94,0,0,0-9.5,21.73A107,107,0,0,0,63.84,52.91C53,65.83,47.3,79.41,47.3,92.18c0,20.8,9.43,33.35,16.42,39.19-2.32.21-4.52.44-6.63.71-19.24,2.45-19.21,12.78-19.18,24.74v3.63H139.48v-3.63c0-12,.06-22.29-19.17-24.74-2.11-.27-4.31-.5-6.63-.71,7-5.84,16.42-18.39,16.42-39.19,0-20.46-13.49-35.94-22.13-44.54l-1.82-1.82L104.84,48c-1.5,2.53-8.82,14.46-9.13,44.61H82c.48-45,18-62,18.18-62.16l.65-.65-.07-.91a13,13,0,0,0-12.9-12Z"/> <path style="opacity:0.2;" d="M115.68,57.6c22.72,55.13-27.07,71.83-27.07,71.83l25.07,1.94c-2.44,1.85,16-5.24,16-41.36A43.76,43.76,0,0,0,115.68,57.6Z"/> <path style="opacity:0.2;fill:#fff;" d="M81.45,38.77c-2.67-1.22-28.61,20.58-32.9,42.92-4,20.81,3.2,26.56,2.77,26.39,0-.13,2.78-45.8,32.83-68.11C84.15,40,83,39.47,81.45,38.77Z"/> <path style="opacity:0.2;fill:#fff;" d="M89.65,18.84c-4.34.39-11.78,6.67-12.4,15.35,0,0-6-5.57.06-12.49C82.05,16.24,89.65,18.84,89.65,18.84Z"/> <path style="opacity:0.2;fill:#fff;" d="M88.7,138.41c43.07,0,47.54,4.75,47.54,4.75h.59c-1.93-10.18-24.5-11.3-24.5-11.3H65.23s-23.36.81-24.66,11.3h.59S45.63,138.41,88.7,138.41Z"/> <path style="opacity:0.2;" d="M86.73,57c1.84-5.06,14.08-29,14.08-29l-5.54-9.19-2.87.06c9.19,11.26-18,37-18,56.43,0,5.69,1.39,17.22,5.53,19.31C80,94.65,82.91,67.54,86.73,57Z"/> <path fill="#1a1a1a" d="M87.82,18.94A10.94,10.94,0,0,1,98.73,29.07S80,46.81,80,94.65H97.7c0-29.93,7-42.36,8.86-45.59,9.46,9.42,21.54,24,21.54,43.12,0,26.23-15.31,38.41-20.33,40.76,4.33.27,8.43.63,12.29,1.12,18.25,2.33,17.42,11.29,17.42,24.39H39.92c0-13.1-.83-22.06,17.42-24.39,3.85-.49,8-.85,12.29-1.12-5-2.35-20.33-14.53-20.33-40.76,0-30.08,32.15-53.41,32.15-53.41a10.94,10.94,0,0,1,6.37-19.83m0-4A14.93,14.93,0,0,0,75.54,38.37,109.36,109.36,0,0,0,62.31,51.63c-11.13,13.28-17,27.3-17,40.55,0,18.39,7.2,30.63,13.88,37.63l-2.35.29c-21,2.67-20.95,14.35-20.92,26.73v5.62H141.48v-5.62c0-12.38.07-24.06-20.92-26.73-.77-.1-1.55-.2-2.34-.28,6.68-7,13.88-19.25,13.88-37.64,0-15.71-7.43-30.74-22.72-46l-3.65-3.63L103.12,47c-5.76,9.76-9,24.78-9.38,43.63H84c.5-21.46,5-36,8.75-44.55,4.32-9.79,8.7-14.09,8.74-14.13l1.35-1.3-.12-1.88a15,15,0,0,0-14.9-13.85Z"/> <path fill="#1a1a1a" d="M88.7,132.41c9,0,17.15.28,24.57.93l1.91-3.84c-7.68-.73-16.4-1.09-26.48-1.09h0c-10.19,0-19,.36-26.73,1.11l1.18,3.91C70.83,132.72,79.34,132.41,88.7,132.41Z"/></g>"""),
  "K": ET.fromstring("""<g transform="scale(0.25)" id="white-king"><path fill="#f9f9f9" d="M149.17,61.56a31.76,31.76,0,0,0-23-9.27c-11.63,0-19.33,3.41-23.56,6.06L99.67,45.52h11.68v-18h-12v-12h-18v12h-12v18H81L78.1,58.35c-4.22-2.65-11.93-6.06-23.55-6.06a31.75,31.75,0,0,0-23,9.27c-5.87,6-9.1,14.48-9.1,23.86,0,13.61,8.68,22.27,17.08,30.65,5.17,5.15,10.49,10.46,14,17-14,3.54-13.92,13-13.9,23.79v3.6H141.13v-3.6c0-10.82.05-20.25-13.89-23.79,3.45-6.53,8.78-11.84,13.94-17,8.4-8.38,17.09-17,17.09-30.65C158.27,76,155,67.57,149.17,61.56ZM128.51,89c-.92,6.43-10.42,12.08-16.78,20.2-3.2-.21-5.17-.38-7.87-.49V83.74s8-5.71,14.43-5.71C118.29,78,130,78.44,128.51,89ZM62.49,78c6.44,0,14.43,5.71,14.43,5.71v24.92c-2.71.11-4.67.28-7.87.49C62.68,101,53.19,95.38,52.27,89,50.77,78.44,62.49,78,62.49,78Z"/> <polygon style="opacity:0.3;fill:#fff;" points="111.35 31.52 95.39 31.52 98.39 28.29 111.35 28.29 111.35 31.52"/> <polygon style="opacity:0.3;fill:#fff;" points="95.35 19.52 85.35 19.52 85.35 31.52 73.35 31.52 73.35 41.52 69.35 45.52 69.35 27.52 81.35 27.52 81.35 15.53 99.35 15.53 95.35 19.52"/> <path style="opacity:0.2;fill:#fff;" d="M90.35,138.41c43.07,0,47.54,4.75,47.54,4.75h.59c-1.94-10.18-24.5-11.3-24.5-11.3H66.88s-23.36.81-24.66,11.3h.59S47.28,138.41,90.35,138.41Z"/> <path style="opacity:0.2;fill:#fff;" d="M64.07,54.82S42.88,47.58,29.8,63.54c-18.12,22.1,2.35,43.09,2.35,43.09C18.85,82.28,33.32,53.46,64.07,54.82Z"/> <path style="opacity:0.2;" d="M144.56,101.34l-29.69,29.78,12.37,1.94a96.69,96.69,0,0,1,15.24-18.69c9.87-9.5,15.77-15.91,15.77-31.56,0-11.49-5.79-16.61-10.95-20.77C147.3,62,159.81,86.09,144.56,101.34Z"/> <path fill="#1a1a1a" d="M62.41,79.79a19.36,19.36,0,0,1,11.94,4.63v22.44l-4.95.28C66.81,104.05,64.29,101.4,62,99c-4.8-5-8.27-8.69-8.27-12,0-5.33,4.47-7.23,8.65-7.23m0-4c-7,0-12.65,4.06-12.65,11.23s8.81,13,17.84,24.22c0,0,8.3-.47,10.75-.57V82.61a23.74,23.74,0,0,0-15.94-6.82Z"/> <path fill="#1a1a1a" d="M90.35,132.41a252.6,252.6,0,0,1,31.36,1.65,43.48,43.48,0,0,1,5.16,1l.67-4a46.89,46.89,0,0,0-5.33-1,254,254,0,0,0-31.86-1.69h0a254.29,254.29,0,0,0-31.87,1.69,47.37,47.37,0,0,0-5.58,1l.83,3.91a42.45,42.45,0,0,1,5.26-1A252.6,252.6,0,0,1,90.35,132.41Z"/> <path fill="#1a1a1a" d="M97.35,17.52v12h12v14h-12l3.75,16.63a56,56,0,0,1,25.05-5.86c17.4,0,30.12,12.73,30.12,31.13,0,21.75-23.46,29.87-31.94,49.05,15.53,2.84,14.8,11.54,14.8,24H41.57c0-12.44-.74-21.14,14.8-24-8.49-19.18-31.94-27.3-31.94-49,0-18.4,12.72-31.13,30.12-31.13a58.23,58.23,0,0,1,25,5.58l3.75-16.35h-12v-14h12v-12h14m4-4h-22v12h-12v22h11L76.77,54.3a64.5,64.5,0,0,0-22.22-4c-19.77,0-34.12,14.78-34.12,35.13,0,14.44,9,23.4,17.67,32.06,4.47,4.46,9.06,9,12.36,14.37-5.23,1.78-8.67,4.62-10.67,8.74-2.26,4.63-2.24,10-2.23,16.26v5.6H143.13v-5.6c0-10.57.06-20.62-12.89-25,3.29-5.33,7.89-9.91,12.36-14.37,8.68-8.66,17.67-17.62,17.67-32.06,0-20.35-14.35-35.13-34.12-35.13a62.21,62.21,0,0,0-22.23,4.2l-1.57-7h11v-22h-12v-12Z"/> <path fill="#1a1a1a" d="M118.28,79.79c4.19,0,8.65,1.9,8.65,7.23,0,3.32-3.46,7-8.26,12-2.27,2.37-4.79,5-7.38,8.11l-4.94-.28V84.42a19.31,19.31,0,0,1,11.93-4.63m0-4a23.72,23.72,0,0,0-15.93,6.82v28.06c2.45.1,10.74.57,10.74.57,9-11.2,17.84-16.92,17.84-24.22s-5.62-11.23-12.65-11.23Z"/></g>"""),
  "N": ET.fromstring("""<g transform="scale(0.25)" id="white-knight"> <path fill="#f9f9f9" d="M73.07,20.25h-.83c-2.72,0-5.43,2.48-6.16,5.64l-1.45,6.88c-1.32,3.14-3.54,5.36-7.13,8.32a19.11,19.11,0,0,0-6.06,8.69l-.17.42c-.9,2.29-1.56,4.3-2.16,6.07A43.59,43.59,0,0,1,43,69.12L31.37,85.5c-3.62,4.51-3.22,10.76.92,14.27s14.4,6.3,17.9,6.3a3.37,3.37,0,0,0,2.42-.78,24.78,24.78,0,0,0,3.7-4.85c2.31-3.6,4-6.2,9.93-6.23,8.73,0,16.28-7.95,19.91-11.76l0,0,0,0,2.18-2.52c1.46,2.33,3.14,6.13,2,10.11a16.46,16.46,0,0,1-2.3,4.79,40.35,40.35,0,0,1-8,8l-.19.16c-7.52,6.08-20,16.15-22.08,30.28-13.33,3.64-13.3,12.93-13.27,23.62v3.61H146.1v-3.6c0-10.69.06-20-13.28-23.63.41-1.59,1-3.64,1.64-5.9,2.63-9.24,6.24-21.9,6.24-30.2,0-19.56-6.19-36-17.89-47.47A59,59,0,0,0,86.05,33.21L73.66,20.84l-.59-.59Z"/> <path style="opacity:0.2;fill:#fff;" d="M95.71,138.41c43.07,0,47.54,4.75,47.54,4.75h.59c-1.93-10.18-24.49-11.3-24.49-11.3H72.24s-23.36.81-24.66,11.3h.59S52.64,138.41,95.71,138.41Z"/> <g style="opacity:0.2;"> <path fill="#fff" d="M69.64,40.21c8.06-5,2.6-18,2.6-18a5,5,0,0,0-5,4l-1.46,6.92c-1.41,3.38-3.71,5.7-7.46,8.8a18,18,0,0,0-5.76,8.26l-.16.42c-.89,2.26-1.52,4.17-2.14,6a44.74,44.74,0,0,1-6.22,13.1L32.42,86.14c-.15.15-.3.31-.44.47a6,6,0,0,0-1,7.74S50,70.9,52.49,67.61C57,61.63,54.16,49.84,69.64,40.21Z"/> </g> <path fill="#1a1a1a" d="M70.78,49.77c-5.23,2.14-6.64,11.09-6.64,11.09,5.08-4.42,7.53.65,12.59-3.36C81,54.16,75.9,47.67,70.78,49.77Z"/> <path style="opacity:0.2;" d="M94.87,66.07c-1.82,3.49-6.33,10.57-6.33,10.57s-.47,1.43-1.05,3.46c0,0,2.08-.23,2.47,6.39.1,1.72.93,7.76,2,5.18C95,84.23,97.14,75.23,97.1,72.18S96.68,62.58,94.87,66.07Z"/> <path style="opacity:0.2;" d="M85.17,35.15S126,40.22,126,79.26c0,26.14-17.38,33.44-22,51,0,0,19.33.15,27.88,4.19,0,0,9.18-24.84,9.18-39.56C141.05,79.83,129.61,34,85.17,35.15Z"/> <path style="opacity:0.2;" d="M70.12,92.2c-9.11-4.47-11.41-9.79-14.91.72-3.4,10.18-8.55,11.93-5.09,13s7.74-10.45,10.77-10.64S73.53,93.87,70.12,92.2Z"/> <path fill="#1a1a1a" d="M72.24,22.25l12.93,12.9c25.26,1.71,53.53,20.1,53.53,62,0,11.12-7,31.49-8.29,37.57,14.39,3.05,13.69,11.63,13.69,23.76H46.54c0-12-.68-20.47,13.08-23.63C61,120.66,74,110.31,81.34,104.33a41.62,41.62,0,0,0,8.41-8.44,18.34,18.34,0,0,0,2.57-5.37c1.82-6.37-2.3-12.09-3.78-13.88l-3.83,4.43C80.85,85.12,74,92.18,66.23,92.21c-10.05.05-10.29,7.09-15,11.65a1.69,1.69,0,0,1-1,.21c-3.27,0-12.92-2.68-16.61-5.82-3.22-2.74-3.64-7.82-.62-11.54l11.7-16.46c5.23-7.6,5.46-11.65,8.48-19.32a17.36,17.36,0,0,1,5.64-8.3c3.81-3.15,6.28-5.61,7.77-9.27l1.48-7c.5-2.16,2.39-4.09,4.21-4.09m1.66-4H72.24c-3.68,0-7.16,3.09-8.11,7.19v.08l-1.39,6.64c-1.18,2.68-3.14,4.62-6.49,7.39a20.82,20.82,0,0,0-6.66,9.51l-.16.41c-.92,2.34-1.6,4.37-2.19,6.17A41.6,41.6,0,0,1,41.38,68L29.77,84.3C25.52,89.65,26,97.09,31,101.3c4.6,3.91,15.36,6.77,19.2,6.77A5.36,5.36,0,0,0,54,106.73a27.63,27.63,0,0,0,4-5.21c2.18-3.41,3.38-5.28,8.25-5.31,9.58,0,17.53-8.37,21.35-12.38l.07-.07.06-.07L88,83.4a9.35,9.35,0,0,1,.49,6,14.14,14.14,0,0,1-2,4.21,38.38,38.38,0,0,1-7.63,7.59l-.19.16c-7.53,6.1-19.83,16.06-22.58,30.27-5.78,1.84-9.58,5-11.57,9.54s-2,9.68-1.94,15.66v5.6H148.1v-5.6c0-6.07,0-11.32-2-15.88-2-4.32-5.44-7.28-10.8-9.1.33-1.2.71-2.56,1.13-4,2.66-9.36,6.31-22.17,6.31-30.75C142.7,55,115,33.84,87,31.28L75.07,19.42,73.9,18.25Z"/> <path fill="#1a1a1a" d="M95.71,132.41a252.5,252.5,0,0,1,31.36,1.65,43.67,43.67,0,0,1,5.17,1l.66-4a46.29,46.29,0,0,0-5.32-1,254.17,254.17,0,0,0-31.87-1.69h0a254,254,0,0,0-31.86,1.69,47,47,0,0,0-5.58,1l.82,3.91a42.8,42.8,0,0,1,5.26-1A252.6,252.6,0,0,1,95.71,132.41Z"/></g>"""),
  "P": ET.fromstring("""<g transform="scale(0.25)" id="white-pawn"><path fill="#f9f9f9" d="M89.94,41.92a23,23,0,0,0-14.24,41L63.79,90.75l-.9.59v1.08a12.17,12.17,0,0,0,2,6.93l.39.72.57,1.05H77.13c-.49,5.61-2,19.66-20,31-8,5-12.66,14.66-12.66,26.36v2h91v-2c0-11.7-4.62-21.31-12.67-26.36-17.94-11.28-19.5-25.36-20-31H114l.57-1.05.39-.72a12.17,12.17,0,0,0,2-6.93V91.34l-.9-.59-11.91-7.86a23,23,0,0,0-14.24-41Z"/> <path style="opacity:0.2;" d="M115.16,127.11c-10.76-7.52-11.49-22.19-12.18-25.54l10.85,0,3.87-9s-11.41-9.29-17-9.46l2.75,0s8.21-6.84,8.92-12.88C115.25,46.21,96.3,43,96.3,43c8.58,4.29,15.07,18.92,7.34,29.82C98.12,80.61,87.34,83,87.34,83h13.3c.16.14,9.38,10-.1,16.16H65.12l.45,2.5,11.45,0S90.26,115,101.23,125.37c10.53,9.93,26.51,11.31,26.51,11.31S120.63,130.94,115.16,127.11Z"/> <path style="opacity:0.2;fill:#fff;" d="M75,92.42C75.6,88,79.14,83,79.24,83L62.47,92.42Z"/> <path style="opacity:0.2;fill:#fff;" d="M92.05,44c-8,.72-20.82,10.3-22.32,30,0,0-8.08-11.62,3.06-24.45C81.56,39.5,92.05,44,92.05,44Z"/> <path style="opacity:0.2;fill:#fff;" d="M46.45,158.45C50.8,144.15,57,142.3,68.3,134c7.54-5.48,8.55-22,8.55-22,.18-.86-3.84,6.67-8.12,10.4-1.41,1.22-11,7.84-15.07,12.17C46.55,142.07,45.61,161.19,46.45,158.45Z"/> <path fill="#1a1a1a" d="M89.94,43.92a21,21,0,0,1,11.79,38.29l-1.09.75L115,92.42c0,3.06-.72,4-2.15,6.7h-12.3l.1,1c.49,4.57.8,20.93,21.06,33.66,7.45,4.68,11.73,13.68,11.73,24.67h-87c0-11,4.27-20,11.73-24.67,20.3-12.76,20.58-29.1,21.06-33.66l.1-1H67c-1.42-2.65-2.15-3.64-2.15-6.7L79.24,83l-1.09-.74a21,21,0,0,1,11.79-38.3m0-4A25,25,0,0,0,72.42,82.66l-9.73,6.42-1.8,1.19v2.15a14.13,14.13,0,0,0,2.24,7.89l.39.71,1.13,2.1H74.88c-2.49,17-14.27,24.41-18.83,27.27-8.65,5.43-13.6,15.66-13.6,28.06v4h95v-4c0-12.4-5-22.63-13.6-28.06-15.11-9.49-18-21-18.86-27.27h10.26l1.13-2.1.39-.71A14.13,14.13,0,0,0,119,92.42V90.27l-1.8-1.19-9.73-6.42A25,25,0,0,0,89.94,39.92Z"/></g>"""),
  "Q": ET.fromstring("""<g transform="scale(0.25)" id="white-queen"><path fill="#f9f9f9" d="M111.12,20.62A14.63,14.63,0,0,0,96.51,35.23a13.92,13.92,0,0,0,5.41,10.93L90.54,79,79.15,46.16a13.92,13.92,0,0,0,5.41-10.93A14.63,14.63,0,0,0,70,20.62,14.46,14.46,0,0,0,55.34,35.23a13.67,13.67,0,0,0,9.22,13.16L62.73,87.11,47,70.32a13.77,13.77,0,0,0,2.25-6.95A14.22,14.22,0,0,0,35.45,49.43,13.9,13.9,0,0,0,21.51,63.37c0,6.6,5.45,12.86,11.57,13.69l23.06,55.46c-16.44,3.06-16.42,12.95-16.39,24.31v3.62H141.32v-3.61c0-11.37.06-21.26-16.39-24.32L148,77.06c6.13-.83,11.58-7.09,11.58-13.69a14,14,0,0,0-13.95-13.94,14.22,14.22,0,0,0-13.78,13.94,13.64,13.64,0,0,0,2.26,6.95L118.35,87.11l-1.83-38.73a13.88,13.88,0,0,0,9.21-13.15,14.45,14.45,0,0,0-14.61-14.61Z"/> <path style="opacity:0.2;" d="M40.24,52.34c5.31,6.79-3.85,12.82,1.26,18.34L64.72,92.17l-17.4-23s2.2-5.64.81-9.8C45,50,40.24,52.34,40.24,52.34Z"/> <path style="opacity:0.2;fill:#fff;" d="M38.42,51.33c-4.81.45-12.22,5.85-13.92,16.84-.13.79-5.49-5,1.6-13.2C31.69,48.47,38.42,51.33,38.42,51.33Z"/> <path style="opacity:0.2;fill:#fff;" d="M148.84,51.33c-4.8.45-12.22,5.85-13.92,16.84-.12.79-5.48-5,1.61-13.2C142.11,48.47,148.84,51.33,148.84,51.33Z"/> <path style="opacity:0.2;fill:#fff;" d="M72.54,22.75c-5.14.53-13.22,6.79-14,19.44,0,0-5.29-7.36,1.72-15.68C65.78,20,72.54,22.75,72.54,22.75Z"/> <path style="opacity:0.2;fill:#fff;" d="M113.44,22.75c-5.14.53-13.22,6.79-14,19.44,0,0-5.28-7.36,1.72-15.68C106.69,20,113.44,22.75,113.44,22.75Z"/> <path style="opacity:0.2;fill:#fff;" d="M91.12,138.41c43.07,0,47.54,4.75,47.54,4.75h.59c-1.93-10.18-24.5-11.3-24.5-11.3H67.65s-23.36.81-24.66,11.3h.59S48.05,138.41,91.12,138.41Z"/> <path style="opacity:0.2;" d="M116.2,112.83c-15.74,17-31.38,16.5-31.38,16.5l39.74,3.1,23.31-55.11s5.42-.62,9.46-7.34c6-9.94-5.53-17.09-5.53-17.09,3.61,4.19,3.08,11.15,0,14s-7.86,3.31-9.69,7.48C142.15,74.36,131.22,96.58,116.2,112.83Z"/> <path style="opacity:0.2;" d="M116.83,23.36c7.64,10.53-6.88,14-6,23.56l5.75,45,0-43s10.08-6.11,9.18-13.42C124.37,24,116.83,23.36,116.83,23.36Z"/> <path style="opacity:0.2;" d="M72.69,45.45,90.54,85.1,79.16,46.49s4.35-6.34,4.35-11.81c0-10.06-8.45-12-8.45-12C83.19,33.57,69.51,35.91,72.69,45.45Z"/> <path fill="#1a1a1a" d="M145.63,47.43c-8.41,0-15.79,7.45-15.79,15.94A14.77,14.77,0,0,0,131.62,70l-11.5,12.26-1.54-32.58a16,16,0,0,0,9.15-14.48,16.43,16.43,0,0,0-16.61-16.61A16.63,16.63,0,0,0,94.51,35.23,16,16,0,0,0,99.58,46.8l-9,26.09L81.49,46.8a16,16,0,0,0,5.07-11.57A16.63,16.63,0,0,0,70,18.62,16.44,16.44,0,0,0,53.34,35.23,15.75,15.75,0,0,0,62.5,49.74L61,82.29,49.45,70a14.71,14.71,0,0,0,1.78-6.66c0-8.49-7.37-15.94-15.78-15.94A16,16,0,0,0,19.51,63.37,16.34,16.34,0,0,0,31.65,78.84l21.72,52.23c-15.68,3.87-15.65,14.54-15.62,25.77v5.61H143.32v-5.61c0-11.24.06-21.9-15.62-25.77l21.72-52.23a16.34,16.34,0,0,0,12.15-15.47A16,16,0,0,0,145.63,47.43Zm-6.31,111H41.76c0-13-.82-22,17.2-24.35l.58-.09a257.11,257.11,0,0,1,31.58-1.6,243.81,243.81,0,0,1,31,1.69C140.13,136.46,139.32,145.4,139.32,158.45Zm7.3-83.29-22.89,55-.75-.1a254,254,0,0,0-31.86-1.69A259,259,0,0,0,59,130c-.57.07-1.12.15-1.66.24L34.46,75.16c-5.48,0-10.95-5.65-10.95-11.79A11.89,11.89,0,0,1,35.45,51.43,12.2,12.2,0,0,1,47.23,63.37c0,3.72-2.82,7.14-2.82,7.14L64.5,91.92l2.14-45.07a11.61,11.61,0,0,1-9.3-11.62A12.41,12.41,0,0,1,70,22.62a12.6,12.6,0,0,1,12.6,12.61,11.85,11.85,0,0,1-5.8,10.12L90.54,85.1l13.78-39.75a11.86,11.86,0,0,1-5.81-10.12,12.61,12.61,0,0,1,12.61-12.61,12.4,12.4,0,0,1,12.61,12.61,11.72,11.72,0,0,1-9.29,11.62l2.14,45.07,20.08-21.41s-2.82-3.4-2.82-7.14a12.2,12.2,0,0,1,11.79-11.94,11.89,11.89,0,0,1,11.94,11.94C157.57,69.51,152.1,75.16,146.62,75.16Z"/></g>"""),
  "R": ET.fromstring("""<g transform="scale(0.25)" id="white-rook"><path fill="#f9f9f9" d="M90,30.87a92.56,92.56,0,0,0-10.56.85l-1.45.2-.25,1.44L74.87,50.28H70L64.84,35.53l-.47-1.34H63a31.07,31.07,0,0,0-14.88,3.72l-1.15.62.1,1.31L48.68,60v.1c1,7.21,4.68,11.7,11.93,14.38-1,8.58-5.74,48.89-6.95,58.44-14.51,3.42-14.49,12.94-14.46,23.92v3.62H140.78v-3.62c0-11,.06-20.5-14.46-23.92-1.2-9.55-5.94-49.86-6.95-58.44,7.26-2.68,11-7.17,11.94-14.38V60L133,39.84l.11-1.31-1.15-.62A31.08,31.08,0,0,0,117,34.19h-1.41l-.47,1.34L110,50.28h-4.85l-2.87-16.92L102,31.92l-1.45-.2A92.56,92.56,0,0,0,90,30.87Z"/> <path style="opacity:0.2;fill:#fff;" d="M90,138.41c43.07,0,47.54,4.75,47.54,4.75h.59c-1.93-10.18-24.49-11.3-24.49-11.3H66.53s-23.36.81-24.66,11.3h.59S46.93,138.41,90,138.41Z"/> <path style="opacity:0.3;fill:#fff;" d="M60,34.43c-10.75,7.36-6.7,34.9-6.7,34.9-6.85-2.21-6.7-31.73-6.7-31.73S63.08,32.34,60,34.43Z"/> <path style="opacity:0.3;fill:#fff;" d="M93.18,32.26c-12,2.19-16.62,19.64-16.62,19.64.8-13,3.52-20.54,3.52-20.54S96.59,31.63,93.18,32.26Z"/> <path style="opacity:0.3;fill:#fff;" d="M125.15,35.88c-7.77,4.11-13.75,16-13.75,16-.44-4.24,5.47-19,5.47-19S128.05,34.35,125.15,35.88Z"/> <path style="opacity:0.2;" d="M123.87,72.17c10.62.24,8.73-32.78,8.73-32.78l-6.36-4c-1.76,10.55-4,26.9-9.16,31.43-4.71,4.15-7.59,5.12-8.31,5.3-1.37-.17-2.83-.33-4.43-.47-14.5-1.32-35.6,2.82-35.6,2.82s21.37-1.3,32.3,12.42,12,43.37,12,43.37c7.16,1.33,12.49,2.8,12.49,2.8l-6.73-57.46S122.46,72.14,123.87,72.17Z"/> <path fill="#1a1a1a" d="M140.65,140.76c-2.2-4.67-6.21-7.71-12.51-9.45-1.35-10.88-5.36-45-6.6-55.54,7.06-3,10.73-7.87,11.75-15.41v-.21L135,40l.21-2.61-2.3-1.24a33.05,33.05,0,0,0-15.84-4h-3.19l-.71,3.12-2.93,13H105l-1.74-15-.35-3-3-.49A72.25,72.25,0,0,0,90,28.87a72.06,72.06,0,0,0-9.94.88l-3,.49-.35,3L75,48.28h-5.2l-2.93-13-.71-3.12H63a33,33,0,0,0-15.83,4l-2.3,1.24L45,40l1.66,20.15v.21c1,7.54,4.68,12.39,11.75,15.41-1.24,10.54-5.26,44.66-6.6,55.54-6.31,1.74-10.32,4.78-12.51,9.45s-2.15,9.91-2.14,16.07v5.62H142.78v-5.62C142.8,150.68,142.81,145.36,140.65,140.76Zm-90-80.94L49,39.67A28.93,28.93,0,0,1,63,36.19L66.6,52.28h12L80.71,33.7A67.28,67.28,0,0,1,90,32.87a67.28,67.28,0,0,1,9.29.83l2.15,18.58h12L117,36.19A29,29,0,0,1,131,39.67l-1.66,20.15c-.77,5.74-3.29,10-10.52,12.73A234.34,234.34,0,0,0,90,70a234.67,234.67,0,0,0-28.8,2.54C54,69.84,51.45,65.56,50.67,59.82Zm11.74,16.6A231,231,0,0,1,90,74a230.47,230.47,0,0,1,27.59,2.41c1.21,10.31,4.93,41.88,6.41,54-.69-.12-1.4-.23-2.14-.32A254,254,0,0,0,90,128.41a254,254,0,0,0-31.86,1.69c-.75.09-1.45.2-2.14.32C57.48,118.3,61.2,86.73,62.41,76.42Zm76.37,82H41.22c0-11.85-.67-20.31,12.69-23.53l.34-.09,1-.21c1-.22,2.16-.4,3.37-.56A252.6,252.6,0,0,1,90,132.41a252.6,252.6,0,0,1,31.36,1.65c1.18.15,2.28.34,3.31.54l1.1.24.23,0C139.45,138.1,138.78,146.58,138.78,158.45Z"/></g>"""),
}

COORDS = {
  "1": ET.fromstring("""<path d="M6.754 26.996h2.578v-8.898l-2.805.562v-1.437l2.79-.563h1.578v10.336h2.578v1.328h-6.72z"/>"""),
  "2": ET.fromstring("""<path d="M8.195 26.996h5.508v1.328H6.297v-1.328q.898-.93 2.445-2.492 1.555-1.57 1.953-2.024.758-.851 1.055-1.437.305-.594.305-1.164 0-.93-.657-1.516-.648-.586-1.695-.586-.742 0-1.57.258-.82.258-1.758.781v-1.593q.953-.383 1.781-.578.828-.196 1.516-.196 1.812 0 2.89.906 1.079.907 1.079 2.422 0 .72-.274 1.368-.265.64-.976 1.515-.196.227-1.243 1.313-1.046 1.078-2.953 3.023z"/>"""),
  "3": ET.fromstring("""<path d="M11.434 22.035q1.132.242 1.765 1.008.64.766.64 1.89 0 1.727-1.187 2.672-1.187.946-3.375.946-.734 0-1.515-.149-.774-.14-1.602-.43V26.45q.656.383 1.438.578.78.196 1.632.196 1.485 0 2.258-.586.782-.586.782-1.703 0-1.032-.727-1.61-.719-.586-2.008-.586h-1.36v-1.297h1.423q1.164 0 1.78-.46.618-.47.618-1.344 0-.899-.64-1.375-.633-.485-1.82-.485-.65 0-1.391.141-.743.14-1.633.437V16.95q.898-.25 1.68-.375.788-.125 1.484-.125 1.797 0 2.844.82 1.046.813 1.046 2.204 0 .968-.554 1.64-.555.664-1.578.922z"/>"""),
  "4": ET.fromstring("""<path d="M11.016 18.035L7.03 24.262h3.985zm-.414-1.375h1.984v7.602h1.664v1.312h-1.664v2.75h-1.57v-2.75H5.75v-1.523z"/>"""),
  "5": ET.fromstring("""<path d="M6.719 16.66h6.195v1.328h-4.75v2.86q.344-.118.688-.172.343-.063.687-.063 1.953 0 3.094 1.07 1.14 1.07 1.14 2.899 0 1.883-1.171 2.93-1.172 1.039-3.305 1.039-.735 0-1.5-.125-.758-.125-1.57-.375v-1.586q.703.383 1.453.57.75.188 1.586.188 1.351 0 2.14-.711.79-.711.79-1.93 0-1.219-.79-1.93-.789-.71-2.14-.71-.633 0-1.266.14-.625.14-1.281.438z"/>"""),
  "6": ET.fromstring("""<path d="M10.137 21.863q-1.063 0-1.688.727-.617.726-.617 1.992 0 1.258.617 1.992.625.727 1.688.727 1.062 0 1.68-.727.624-.734.624-1.992 0-1.266-.625-1.992-.617-.727-1.68-.727zm3.133-4.945v1.437q-.594-.28-1.204-.43-.601-.148-1.195-.148-1.562 0-2.39 1.055-.82 1.055-.938 3.188.46-.68 1.156-1.04.696-.367 1.531-.367 1.758 0 2.774 1.07 1.023 1.063 1.023 2.899 0 1.797-1.062 2.883-1.063 1.086-2.828 1.086-2.024 0-3.094-1.547-1.07-1.555-1.07-4.5 0-2.766 1.312-4.406 1.313-1.649 3.524-1.649.593 0 1.195.117.61.118 1.266.352z"/>"""),
  "7": ET.fromstring("""<path d="M6.25 16.66h7.5v.672L9.516 28.324H7.867l3.985-10.336H6.25z"/>"""),
  "8": ET.fromstring("""<path d="M10 22.785q-1.125 0-1.773.602-.641.601-.641 1.656t.64 1.656q.649.602 1.774.602t1.773-.602q.649-.61.649-1.656 0-1.055-.649-1.656-.64-.602-1.773-.602zm-1.578-.672q-1.016-.25-1.586-.945-.563-.695-.563-1.695 0-1.399.993-2.211 1-.813 2.734-.813 1.742 0 2.734.813.993.812.993 2.21 0 1-.57 1.696-.563.695-1.571.945 1.14.266 1.773 1.04.641.773.641 1.89 0 1.695-1.04 2.602-1.03.906-2.96.906t-2.969-.906Q6 26.738 6 25.043q0-1.117.64-1.89.641-.774 1.782-1.04zm-.578-2.492q0 .906.562 1.414.57.508 1.594.508 1.016 0 1.586-.508.578-.508.578-1.414 0-.906-.578-1.414-.57-.508-1.586-.508-1.023 0-1.594.508-.562.508-.562 1.414z"/>"""),
  "a": ET.fromstring("""<path d="M23.328 10.016q-1.742 0-2.414.398-.672.398-.672 1.36 0 .765.5 1.218.508.445 1.375.445 1.196 0 1.914-.843.727-.852.727-2.258v-.32zm2.867-.594v4.992h-1.437v-1.328q-.492.797-1.227 1.18-.734.375-1.797.375-1.343 0-2.14-.75-.79-.758-.79-2.024 0-1.476.985-2.226.992-.75 2.953-.75h2.016V8.75q0-.992-.656-1.531-.649-.547-1.829-.547-.75 0-1.46.18-.711.18-1.368.539V6.062q.79-.304 1.532-.453.742-.156 1.445-.156 1.898 0 2.836.984.937.985.937 2.985z"/>"""),
  "b": ET.fromstring("""<path d="M24.922 10.047q0-1.586-.656-2.485-.649-.906-1.79-.906-1.14 0-1.796.906-.649.899-.649 2.485 0 1.586.649 2.492.656.898 1.797.898 1.14 0 1.789-.898.656-.906.656-2.492zm-4.89-3.055q.452-.781 1.14-1.156.695-.383 1.656-.383 1.594 0 2.586 1.266 1 1.265 1 3.328 0 2.062-1 3.328-.992 1.266-2.586 1.266-.96 0-1.656-.375-.688-.383-1.14-1.164v1.312h-1.446V2.258h1.445z"/>"""),
  "c": ET.fromstring("""<path d="M25.96 6v1.344q-.608-.336-1.226-.5-.609-.172-1.234-.172-1.398 0-2.172.89-.773.883-.773 2.485 0 1.601.773 2.492.774.883 2.172.883.625 0 1.234-.164.618-.172 1.227-.508v1.328q-.602.281-1.25.422-.64.14-1.367.14-1.977 0-3.14-1.242-1.165-1.242-1.165-3.351 0-2.14 1.172-3.367 1.18-1.227 3.227-1.227.664 0 1.296.14.633.134 1.227.407z"/>"""),
  "d": ET.fromstring("""<path d="M24.973 6.992V2.258h1.437v12.156h-1.437v-1.312q-.453.78-1.149 1.164-.687.375-1.656.375-1.586 0-2.586-1.266-.992-1.266-.992-3.328 0-2.063.992-3.328 1-1.266 2.586-1.266.969 0 1.656.383.696.375 1.149 1.156zm-4.899 3.055q0 1.586.649 2.492.656.898 1.797.898 1.14 0 1.796-.898.657-.906.657-2.492 0-1.586-.657-2.485-.656-.906-1.796-.906-1.141 0-1.797.906-.649.899-.649 2.485z"/>"""),
  "e": ET.fromstring("""<path d="M26.555 9.68v.703h-6.61q.094 1.484.89 2.265.806.774 2.235.774.828 0 1.602-.203.781-.203 1.547-.61v1.36q-.774.328-1.586.5-.813.172-1.649.172-2.093 0-3.32-1.22-1.219-1.218-1.219-3.296 0-2.148 1.157-3.406 1.164-1.266 3.132-1.266 1.766 0 2.79 1.14 1.03 1.134 1.03 3.087zm-1.438-.422q-.015-1.18-.664-1.883-.64-.703-1.703-.703-1.203 0-1.93.68-.718.68-.828 1.914z"/>"""),
  "f": ET.fromstring("""<path d="M25.285 2.258v1.195H23.91q-.773 0-1.078.313-.297.312-.297 1.125v.773h2.367v1.117h-2.367v7.633H21.09V6.781h-1.375V5.664h1.375v-.61q0-1.46.68-2.124.68-.672 2.156-.672z"/>"""),
  "g": ET.fromstring("""<path d="M24.973 9.937q0-1.562-.649-2.421-.64-.86-1.804-.86-1.157 0-1.805.86-.64.859-.64 2.421 0 1.555.64 2.415.648.859 1.805.859 1.164 0 1.804-.86.649-.859.649-2.414zm1.437 3.391q0 2.234-.992 3.32-.992 1.094-3.04 1.094-.757 0-1.429-.117-.672-.11-1.304-.344v-1.398q.632.344 1.25.508.617.164 1.257.164 1.414 0 2.118-.743.703-.734.703-2.226v-.711q-.446.773-1.141 1.156-.695.383-1.664.383-1.61 0-2.594-1.227-.984-1.226-.984-3.25 0-2.03.984-3.257.985-1.227 2.594-1.227.969 0 1.664.383t1.14 1.156V5.664h1.438z"/>"""),
  "h": ET.fromstring("""<path d="M26.164 9.133v5.281h-1.437V9.18q0-1.243-.485-1.86-.484-.617-1.453-.617-1.164 0-1.836.742-.672.742-.672 2.024v4.945h-1.445V2.258h1.445v4.765q.516-.789 1.211-1.18.703-.39 1.617-.39 1.508 0 2.282.938.773.93.773 2.742z"/>"""),
}

NAGS = {
  # "!"
  "1": ET.fromstring("""<g id="great_find" transform="scale(1.25)">
        <path class="icon-shadow" opacity="0.3" d="M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z"></path>
        <path class="icon-background" stroke="white" fill="#749BBF" d="M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z"></path>
        <g>
          <g class="icon-component-shadow" opacity="0.2">
            <path d="M10.32,14.6a.27.27,0,0,1,0,.13.44.44,0,0,1-.08.11l-.11.08-.13,0H8l-.13,0-.11-.08a.41.41,0,0,1-.08-.24V12.7a.27.27,0,0,1,0-.13.36.36,0,0,1,.07-.1.39.39,0,0,1,.1-.08l.13,0h2a.31.31,0,0,1,.24.1.39.39,0,0,1,.08.1.51.51,0,0,1,0,.13Zm-.12-3.93a.17.17,0,0,1,0,.12.41.41,0,0,1-.07.11.4.4,0,0,1-.23.08H8.1a.31.31,0,0,1-.34-.31L7.61,3.9a.36.36,0,0,1,.09-.24.23.23,0,0,1,.11-.08.27.27,0,0,1,.13,0h2.11a.32.32,0,0,1,.25.1.36.36,0,0,1,.09.24Z"></path>
          </g>
          <path class="icon-component" fill="#fff" d="M10.32,14.1a.27.27,0,0,1,0,.13.44.44,0,0,1-.08.11l-.11.08-.13,0H8l-.13,0-.11-.08a.41.41,0,0,1-.08-.24V12.2a.27.27,0,0,1,0-.13.36.36,0,0,1,.07-.1.39.39,0,0,1,.1-.08l.13,0h2a.31.31,0,0,1,.24.1.39.39,0,0,1,.08.1.51.51,0,0,1,0,.13Zm-.12-3.93a.17.17,0,0,1,0,.12.41.41,0,0,1-.07.11.4.4,0,0,1-.23.08H8.1a.31.31,0,0,1-.34-.31L7.61,3.4a.36.36,0,0,1,.09-.24.23.23,0,0,1,.11-.08.27.27,0,0,1,.13,0h2.11a.32.32,0,0,1,.25.1.36.36,0,0,1,.09.24Z"></path>
        </g>
      </g>"""),
  # "?"
  "2": ET.fromstring("""<g id="mistake" transform="scale(1.25)">
        <g>
          <path class="icon-shadow" opacity="0.3" d="M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z"></path>
          <path class="icon-background" stroke="white" fill="#e58f2a" d="M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z"></path>
        </g>
        <g>
          <g class="icon-component-shadow" opacity="0.2">
            <path d="M9.92,15a.27.27,0,0,1,0,.12.41.41,0,0,1-.07.11.32.32,0,0,1-.23.09H7.7a.25.25,0,0,1-.12,0,.27.27,0,0,1-.1-.08A.31.31,0,0,1,7.39,15V13.19A.32.32,0,0,1,7.48,13l.1-.07.12,0H9.59a.32.32,0,0,1,.23.09.61.61,0,0,1,.07.1.28.28,0,0,1,0,.13Zm2.2-7.17a3.1,3.1,0,0,1-.36.73,5.58,5.58,0,0,1-.49.6,6,6,0,0,1-.52.49,8,8,0,0,0-.65.63,1,1,0,0,0-.27.7v.22a.24.24,0,0,1,0,.12.17.17,0,0,1-.06.1.3.3,0,0,1-.1.07l-.12,0H7.79l-.12,0a.3.3,0,0,1-.1-.07.26.26,0,0,1-.07-.1.37.37,0,0,1,0-.12v-.35A2.42,2.42,0,0,1,7.61,10a2.55,2.55,0,0,1,.33-.66,3.38,3.38,0,0,1,.45-.55c.16-.15.33-.29.49-.42a7.73,7.73,0,0,0,.64-.64,1,1,0,0,0,.26-.67.77.77,0,0,0-.07-.34.75.75,0,0,0-.23-.27,1.16,1.16,0,0,0-.72-.24,1.61,1.61,0,0,0-.49.07,3,3,0,0,0-.41.18,1.41,1.41,0,0,0-.29.18l-.11.09a.5.5,0,0,1-.24.06A.31.31,0,0,1,7,6.69L6,5.48a.29.29,0,0,1,0-.4,1.36,1.36,0,0,1,.21-.2,3.07,3.07,0,0,1,.56-.38,5.38,5.38,0,0,1,.89-.37A3.75,3.75,0,0,1,8.9,4a4.07,4.07,0,0,1,1.2.19,4,4,0,0,1,1.09.56,2.76,2.76,0,0,1,.78.92,2.82,2.82,0,0,1,.28,1.28A3,3,0,0,1,12.12,7.85Z"></path>
          </g>
          <path class="icon-component" fill="#fff" d="M9.92,14.52a.27.27,0,0,1,0,.12.41.41,0,0,1-.07.11.32.32,0,0,1-.23.09H7.7a.25.25,0,0,1-.12,0,.27.27,0,0,1-.1-.08.31.31,0,0,1-.09-.22V12.69a.32.32,0,0,1,.09-.23l.1-.07.12,0H9.59a.32.32,0,0,1,.23.09.61.61,0,0,1,.07.1.28.28,0,0,1,0,.13Zm2.2-7.17a3.1,3.1,0,0,1-.36.73,5.58,5.58,0,0,1-.49.6,6,6,0,0,1-.52.49,8,8,0,0,0-.65.63,1,1,0,0,0-.27.7v.22a.24.24,0,0,1,0,.12.17.17,0,0,1-.06.1.3.3,0,0,1-.1.07l-.12,0H7.79l-.12,0a.3.3,0,0,1-.1-.07.26.26,0,0,1-.07-.1.37.37,0,0,1,0-.12v-.35a2.42,2.42,0,0,1,.13-.84,2.55,2.55,0,0,1,.33-.66,3.38,3.38,0,0,1,.45-.55c.16-.15.33-.29.49-.42a7.73,7.73,0,0,0,.64-.64,1,1,0,0,0,.26-.67.77.77,0,0,0-.07-.34A.75.75,0,0,0,9.48,6a1.16,1.16,0,0,0-.72-.24,1.61,1.61,0,0,0-.49.07A3,3,0,0,0,7.86,6a1.41,1.41,0,0,0-.29.18l-.11.09a.5.5,0,0,1-.24.06A.31.31,0,0,1,7,6.19L6,5a.29.29,0,0,1,0-.4,1.36,1.36,0,0,1,.21-.2A3.07,3.07,0,0,1,6.81,4a5.38,5.38,0,0,1,.89-.37,3.75,3.75,0,0,1,1.2-.17,4.07,4.07,0,0,1,1.2.19,4,4,0,0,1,1.09.56,2.76,2.76,0,0,1,.78.92,2.82,2.82,0,0,1,.28,1.28A3,3,0,0,1,12.12,7.35Z"></path>
        </g>
      </g>"""),
  # "!!"
  "3": ET.fromstring("""<g id="brilliant" transform="scale(1.25)">
        <path class="icon-shadow" opacity="0.3" d="M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z"></path>
        <path class="icon-background" stroke="white" fill="#26c2a3" d="M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z"></path>
        <g class="icon-component-shadow" opacity="0.2">
          <path d="M12.57,14.6a.51.51,0,0,1,0,.13.44.44,0,0,1-.08.11l-.11.08-.13,0h-2l-.13,0L10,14.84A.41.41,0,0,1,10,14.6V12.7a.32.32,0,0,1,.09-.23.39.39,0,0,1,.1-.08l.13,0h2a.31.31,0,0,1,.24.1.39.39,0,0,1,.08.1.51.51,0,0,1,0,.13Zm-.12-3.93a.17.17,0,0,1,0,.12.41.41,0,0,1-.07.11.4.4,0,0,1-.23.08H10.35a.31.31,0,0,1-.34-.31L9.86,3.9A.36.36,0,0,1,10,3.66a.23.23,0,0,1,.11-.08.27.27,0,0,1,.13,0H12.3a.32.32,0,0,1,.25.1.36.36,0,0,1,.09.24Z"></path>
          <path d="M8.07,14.6a.51.51,0,0,1,0,.13.44.44,0,0,1-.08.11l-.11.08-.13,0h-2l-.13,0-.11-.08a.41.41,0,0,1-.08-.24V12.7a.27.27,0,0,1,0-.13.36.36,0,0,1,.07-.1.39.39,0,0,1,.1-.08l.13,0h2a.31.31,0,0,1,.24.1.39.39,0,0,1,.08.1.51.51,0,0,1,0,.13ZM8,10.67a.17.17,0,0,1,0,.12.41.41,0,0,1-.07.11.4.4,0,0,1-.23.08H5.85a.31.31,0,0,1-.34-.31L5.36,3.9a.36.36,0,0,1,.09-.24.23.23,0,0,1,.11-.08.27.27,0,0,1,.13,0H7.8a.35.35,0,0,1,.25.1.36.36,0,0,1,.09.24Z"></path>
        </g>
        <g>
          <path class="icon-component" fill="#fff" d="M12.57,14.1a.51.51,0,0,1,0,.13.44.44,0,0,1-.08.11l-.11.08-.13,0h-2l-.13,0L10,14.34A.41.41,0,0,1,10,14.1V12.2A.32.32,0,0,1,10,12a.39.39,0,0,1,.1-.08l.13,0h2a.31.31,0,0,1,.24.1.39.39,0,0,1,.08.1.51.51,0,0,1,0,.13Zm-.12-3.93a.17.17,0,0,1,0,.12.41.41,0,0,1-.07.11.4.4,0,0,1-.23.08H10.35a.31.31,0,0,1-.34-.31L9.86,3.4A.36.36,0,0,1,10,3.16a.23.23,0,0,1,.11-.08.27.27,0,0,1,.13,0H12.3a.32.32,0,0,1,.25.1.36.36,0,0,1,.09.24Z"></path>
          <path class="icon-component" fill="#fff" d="M8.07,14.1a.51.51,0,0,1,0,.13.44.44,0,0,1-.08.11l-.11.08-.13,0h-2l-.13,0-.11-.08a.41.41,0,0,1-.08-.24V12.2a.27.27,0,0,1,0-.13.36.36,0,0,1,.07-.1.39.39,0,0,1,.1-.08l.13,0h2A.31.31,0,0,1,8,12a.39.39,0,0,1,.08.1.51.51,0,0,1,0,.13ZM8,10.17a.17.17,0,0,1,0,.12.41.41,0,0,1-.07.11.4.4,0,0,1-.23.08H5.85a.31.31,0,0,1-.34-.31L5.36,3.4a.36.36,0,0,1,.09-.24.23.23,0,0,1,.11-.08.27.27,0,0,1,.13,0H7.8a.35.35,0,0,1,.25.1.36.36,0,0,1,.09.24Z"></path>
        </g>
      </g>"""),
  # "??"
  "4": ET.fromstring("""<g id="blunder" transform="scale(1.25)">
        <path class="icon-shadow" opacity="0.3" d="M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z"></path>
        <path class="icon-background" stroke="white" fill="#FA412D" d="M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z"></path>
        <g class="icon-component-shadow" opacity="0.2">
          <path d="M14.74,5.45A2.58,2.58,0,0,0,14,4.54,3.76,3.76,0,0,0,12.89,4a4.07,4.07,0,0,0-1.2-.19A3.92,3.92,0,0,0,10.51,4a5.87,5.87,0,0,0-.9.37,3,3,0,0,0-.32.2,3.46,3.46,0,0,1,.42.63,3.29,3.29,0,0,1,.36,1.47.31.31,0,0,0,.19-.06l.11-.08a2.9,2.9,0,0,1,.29-.19,3.89,3.89,0,0,1,.41-.17,1.55,1.55,0,0,1,.48-.07,1.1,1.1,0,0,1,.72.24.72.72,0,0,1,.23.26.8.8,0,0,1,.07.34,1,1,0,0,1-.25.67,7.71,7.71,0,0,1-.65.63,6.2,6.2,0,0,0-.48.43,2.93,2.93,0,0,0-.45.54,2.55,2.55,0,0,0-.33.66,2.62,2.62,0,0,0-.13.83V11a.24.24,0,0,0,0,.12.35.35,0,0,0,.17.17l.12,0h1.71l.12,0a.23.23,0,0,0,.1-.07.21.21,0,0,0,.06-.1.27.27,0,0,0,0-.12V10.8a1,1,0,0,1,.26-.7q.27-.28.66-.63A5.79,5.79,0,0,0,14.05,9a4.51,4.51,0,0,0,.48-.6,2.56,2.56,0,0,0,.36-.72,2.81,2.81,0,0,0,.14-1A2.66,2.66,0,0,0,14.74,5.45Z"></path>
          <path d="M12.38,12.65H10.5l-.12,0a.34.34,0,0,0-.18.29v1.82a.36.36,0,0,0,.08.23.23.23,0,0,0,.1.07l.12,0h1.88a.24.24,0,0,0,.12,0,.26.26,0,0,0,.11-.07.36.36,0,0,0,.07-.1.28.28,0,0,0,0-.13V13a.27.27,0,0,0,0-.12.61.61,0,0,0-.07-.1A.32.32,0,0,0,12.38,12.65Z"></path>
          <path d="M6.79,12.65H4.91l-.12,0a.34.34,0,0,0-.18.29v1.82a.36.36,0,0,0,.08.23.23.23,0,0,0,.1.07l.12,0H6.79a.24.24,0,0,0,.12,0A.26.26,0,0,0,7,15a.36.36,0,0,0,.07-.1.28.28,0,0,0,0-.13V13a.27.27,0,0,0,0-.12.61.61,0,0,0-.07-.1A.32.32,0,0,0,6.79,12.65Z"></path>
          <path d="M8.39,4.54A3.76,3.76,0,0,0,7.3,4a4.07,4.07,0,0,0-1.2-.19A3.92,3.92,0,0,0,4.92,4a5.87,5.87,0,0,0-.9.37,3.37,3.37,0,0,0-.55.38l-.21.19a.32.32,0,0,0,0,.41l1,1.2a.26.26,0,0,0,.2.12.48.48,0,0,0,.24-.06l.11-.08a2.9,2.9,0,0,1,.29-.19l.4-.17A1.66,1.66,0,0,1,6,6.06a1.1,1.1,0,0,1,.72.24.72.72,0,0,1,.23.26A.77.77,0,0,1,7,6.9a1,1,0,0,1-.26.67,7.6,7.6,0,0,1-.64.63,6.28,6.28,0,0,0-.49.43,2.93,2.93,0,0,0-.45.54,2.72,2.72,0,0,0-.33.66,2.62,2.62,0,0,0-.13.83V11a.43.43,0,0,0,0,.12.39.39,0,0,0,.08.1.18.18,0,0,0,.1.07.21.21,0,0,0,.12,0H6.72l.12,0a.23.23,0,0,0,.1-.07.36.36,0,0,0,.07-.1A.5.5,0,0,0,7,11V10.8a1,1,0,0,1,.27-.7A8,8,0,0,1,8,9.47c.18-.15.35-.31.52-.48A7,7,0,0,0,9,8.39a3.23,3.23,0,0,0,.36-.72,3.07,3.07,0,0,0,.13-1,2.66,2.66,0,0,0-.29-1.27A2.58,2.58,0,0,0,8.39,4.54Z"></path>
        </g>
        <g>
          <path class="icon-component" fill="#fff" d="M14.74,5A2.58,2.58,0,0,0,14,4a3.76,3.76,0,0,0-1.09-.56,4.07,4.07,0,0,0-1.2-.19,3.92,3.92,0,0,0-1.18.17,5.87,5.87,0,0,0-.9.37,3,3,0,0,0-.32.2,3.46,3.46,0,0,1,.42.63,3.29,3.29,0,0,1,.36,1.47.31.31,0,0,0,.19-.06L10.37,6a2.9,2.9,0,0,1,.29-.19,3.89,3.89,0,0,1,.41-.17,1.55,1.55,0,0,1,.48-.07,1.1,1.1,0,0,1,.72.24.72.72,0,0,1,.23.26.8.8,0,0,1,.07.34,1,1,0,0,1-.25.67,7.71,7.71,0,0,1-.65.63,6.2,6.2,0,0,0-.48.43,2.93,2.93,0,0,0-.45.54,2.55,2.55,0,0,0-.33.66,2.62,2.62,0,0,0-.13.83v.35a.24.24,0,0,0,0,.12.35.35,0,0,0,.17.17l.12,0h1.71l.12,0a.23.23,0,0,0,.1-.07.21.21,0,0,0,.06-.1.27.27,0,0,0,0-.12V10.3a1,1,0,0,1,.26-.7q.27-.28.66-.63a5.79,5.79,0,0,0,.51-.48,4.51,4.51,0,0,0,.48-.6,2.56,2.56,0,0,0,.36-.72,2.81,2.81,0,0,0,.14-1A2.66,2.66,0,0,0,14.74,5Z"></path>
          <path class="icon-component" fill="#fff" d="M12.38,12.15H10.5l-.12,0a.34.34,0,0,0-.18.29v1.82a.36.36,0,0,0,.08.23.23.23,0,0,0,.1.07l.12,0h1.88a.24.24,0,0,0,.12,0,.26.26,0,0,0,.11-.07.36.36,0,0,0,.07-.1.28.28,0,0,0,0-.13V12.46a.27.27,0,0,0,0-.12.61.61,0,0,0-.07-.1A.32.32,0,0,0,12.38,12.15Z"></path>
          <path class="icon-component" fill="#fff" d="M6.79,12.15H4.91l-.12,0a.34.34,0,0,0-.18.29v1.82a.36.36,0,0,0,.08.23.23.23,0,0,0,.1.07l.12,0H6.79a.24.24,0,0,0,.12,0A.26.26,0,0,0,7,14.51a.36.36,0,0,0,.07-.1.28.28,0,0,0,0-.13V12.46a.27.27,0,0,0,0-.12.61.61,0,0,0-.07-.1A.32.32,0,0,0,6.79,12.15Z"></path>
          <path class="icon-component" fill="#fff" d="M8.39,4A3.76,3.76,0,0,0,7.3,3.48a4.07,4.07,0,0,0-1.2-.19,3.92,3.92,0,0,0-1.18.17,5.87,5.87,0,0,0-.9.37,3.37,3.37,0,0,0-.55.38l-.21.19a.32.32,0,0,0,0,.41l1,1.2a.26.26,0,0,0,.2.12.48.48,0,0,0,.24-.06L4.78,6a2.9,2.9,0,0,1,.29-.19l.4-.17A1.66,1.66,0,0,1,6,5.56a1.1,1.1,0,0,1,.72.24.72.72,0,0,1,.23.26A.77.77,0,0,1,7,6.4a1,1,0,0,1-.26.67,7.6,7.6,0,0,1-.64.63,6.28,6.28,0,0,0-.49.43,2.93,2.93,0,0,0-.45.54,2.72,2.72,0,0,0-.33.66,2.62,2.62,0,0,0-.13.83v.35a.43.43,0,0,0,0,.12.39.39,0,0,0,.08.1.18.18,0,0,0,.1.07.21.21,0,0,0,.12,0H6.72l.12,0a.23.23,0,0,0,.1-.07.36.36,0,0,0,.07-.1.5.5,0,0,0,0-.12V10.3a1,1,0,0,1,.27-.7A8,8,0,0,1,8,9c.18-.15.35-.31.52-.48A7,7,0,0,0,9,7.89a3.23,3.23,0,0,0,.36-.72,3.07,3.07,0,0,0,.13-1A2.66,2.66,0,0,0,9.15,5,2.58,2.58,0,0,0,8.39,4Z"></path>
        </g>
      </g>"""),
  # "?!"
  "6": ET.fromstring("""<g id="inaccuracy" transform="scale(1.25)">
        <path class="icon-shadow" opacity="0.3" d="M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z"></path>
        <path class="icon-background" stroke="white" fill="#e58f2a" d="M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z"></path>
        <g class="icon-component-shadow" opacity="0.2">
          <path d="M13.66,14.8a.28.28,0,0,1,0,.13.23.23,0,0,1-.08.11.28.28,0,0,1-.11.08l-.12,0h-2l-.13,0a.27.27,0,0,1-.1-.08A.36.36,0,0,1,11,14.8V12.9a.59.59,0,0,1,0-.13.36.36,0,0,1,.07-.1l.1-.08.13,0h2a.33.33,0,0,1,.23.1.39.39,0,0,1,.08.1.28.28,0,0,1,0,.13Zm-.12-3.93a.31.31,0,0,1,0,.13.3.3,0,0,1-.07.1.3.3,0,0,1-.23.08H11.43a.31.31,0,0,1-.34-.31L10.94,4.1A.5.5,0,0,1,11,3.86l.11-.08.13,0h2.11a.35.35,0,0,1,.26.1.41.41,0,0,1,.08.24Z"></path>
          <path d="M7.65,14.82a.27.27,0,0,1,0,.12.26.26,0,0,1-.07.11l-.1.07-.13,0H5.43a.25.25,0,0,1-.12,0,.27.27,0,0,1-.1-.08.31.31,0,0,1-.09-.22V13a.36.36,0,0,1,.09-.23l.1-.07.12,0H7.32a.32.32,0,0,1,.23.09.3.3,0,0,1,.07.1.28.28,0,0,1,0,.13Zm2.2-7.17a3.1,3.1,0,0,1-.36.73A5.58,5.58,0,0,1,9,9a4.85,4.85,0,0,1-.52.49,8,8,0,0,0-.65.63,1,1,0,0,0-.27.7V11a.21.21,0,0,1,0,.12.17.17,0,0,1-.06.1.23.23,0,0,1-.1.07l-.12,0H5.53a.21.21,0,0,1-.12,0,.18.18,0,0,1-.1-.07.2.2,0,0,1-.08-.1.37.37,0,0,1,0-.12v-.35a2.68,2.68,0,0,1,.13-.84,2.91,2.91,0,0,1,.33-.66,3.38,3.38,0,0,1,.45-.55c.16-.15.33-.29.49-.42a7.84,7.84,0,0,0,.65-.64,1,1,0,0,0,.25-.67.77.77,0,0,0-.07-.34.67.67,0,0,0-.23-.27A1.16,1.16,0,0,0,6.49,6,1.61,1.61,0,0,0,6,6.11a3,3,0,0,0-.41.18,1.75,1.75,0,0,0-.29.18l-.11.09A.5.5,0,0,1,5,6.62a.31.31,0,0,1-.21-.13l-1-1.21a.3.3,0,0,1,0-.4A1.36,1.36,0,0,1,4,4.68a3.07,3.07,0,0,1,.56-.38,5.49,5.49,0,0,1,.9-.37,3.69,3.69,0,0,1,1.19-.17,3.92,3.92,0,0,1,2.3.75,2.85,2.85,0,0,1,.77.92A2.82,2.82,0,0,1,10,6.71,3,3,0,0,1,9.85,7.65Z"></path>
        </g>
        <g>
          <path class="icon-component" fill="#fff" d="M13.66,14.3a.28.28,0,0,1,0,.13.23.23,0,0,1-.08.11.28.28,0,0,1-.11.08l-.12,0h-2l-.13,0a.27.27,0,0,1-.1-.08A.36.36,0,0,1,11,14.3V12.4a.59.59,0,0,1,0-.13.36.36,0,0,1,.07-.1l.1-.08.13,0h2a.33.33,0,0,1,.23.1.39.39,0,0,1,.08.1.28.28,0,0,1,0,.13Zm-.12-3.93a.31.31,0,0,1,0,.13.3.3,0,0,1-.07.1.3.3,0,0,1-.23.08H11.43a.31.31,0,0,1-.34-.31L10.94,3.6A.5.5,0,0,1,11,3.36l.11-.08.13,0h2.11a.35.35,0,0,1,.26.1.41.41,0,0,1,.08.24Z"></path>
          <path class="icon-component" fill="#fff" d="M7.65,14.32a.27.27,0,0,1,0,.12.26.26,0,0,1-.07.11l-.1.07-.13,0H5.43a.25.25,0,0,1-.12,0,.27.27,0,0,1-.1-.08.31.31,0,0,1-.09-.22V12.49a.36.36,0,0,1,.09-.23l.1-.07.12,0H7.32a.32.32,0,0,1,.23.09.3.3,0,0,1,.07.1.28.28,0,0,1,0,.13Zm2.2-7.17a3.1,3.1,0,0,1-.36.73,5.58,5.58,0,0,1-.49.6A4.85,4.85,0,0,1,8.48,9a8,8,0,0,0-.65.63,1,1,0,0,0-.27.7v.22a.21.21,0,0,1,0,.12.17.17,0,0,1-.06.1.23.23,0,0,1-.1.07l-.12,0H5.53a.21.21,0,0,1-.12,0,.18.18,0,0,1-.1-.07.2.2,0,0,1-.08-.1.37.37,0,0,1,0-.12v-.35a2.68,2.68,0,0,1,.13-.84,2.91,2.91,0,0,1,.33-.66,3.38,3.38,0,0,1,.45-.55c.16-.15.33-.29.49-.42a7.84,7.84,0,0,0,.65-.64,1,1,0,0,0,.25-.67.77.77,0,0,0-.07-.34.67.67,0,0,0-.23-.27,1.16,1.16,0,0,0-.72-.24A1.61,1.61,0,0,0,6,5.61a3,3,0,0,0-.41.18A1.75,1.75,0,0,0,5.3,6l-.11.09A.5.5,0,0,1,5,6.12.31.31,0,0,1,4.74,6l-1-1.21a.3.3,0,0,1,0-.4A1.36,1.36,0,0,1,4,4.18a3.07,3.07,0,0,1,.56-.38,5.49,5.49,0,0,1,.9-.37,3.69,3.69,0,0,1,1.19-.17A3.92,3.92,0,0,1,8.93,4a2.85,2.85,0,0,1,.77.92A2.82,2.82,0,0,1,10,6.21,3,3,0,0,1,9.85,7.15Z"></path>
        </g>
      </g>"""),
  # "N"
  "146": ET.fromstring("""<g id="novelty" transform="scale(1.25)">
        <path class="icon-shadow" opacity="0.3" d="M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z"></path>
        <path class="icon-background" fill="#9d3080" d="M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z"></path>
        <path class="icon-component" fill="white" d="M 4.945 4.203 L 4.945 13.973 L 6.984 13.973 L 6.984 8.112 L 11.059 13.973 L 13.097 13.973 L 13.097 4.203 L 11.059 4.203 L 11.059 10.065 L 6.984 4.203 L 4.945 4.203 Z" style=""></path>
      </g>""")
}

LOOSER_NAG = ET.fromstring("""
<g id="looser" transform="scale(1.25)">
  <path class="icon-shadow" opacity="0.3" d="M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z"></path>
  <path class="icon-background" stroke="white" fill="#e02828" d="M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z"></path>
  <path class="icon-component" fill="white" d="M 8.263 6.046 C 8.534 6.046 8.825 6.334 9.232 6.747 C 9.426 6.953 9.639 7.159 9.891 7.386 C 9.891 7.51 9.872 7.654 9.872 7.798 L 8.049 7.798 C 7.817 7.489 7.681 7.139 7.681 6.788 C 7.681 6.417 7.836 6.046 8.263 6.046 Z M 8.263 12.314 C 7.836 12.314 7.681 11.943 7.681 11.572 C 7.681 11.221 7.817 10.87 8.049 10.561 L 9.872 10.561 C 9.872 10.706 9.891 10.85 9.891 10.974 C 9.639 11.2 9.426 11.407 9.232 11.613 C 8.825 12.025 8.534 12.314 8.263 12.314 Z M 10.718 4.706 C 10.02 3.963 9.303 3.18 8.14 3.18 C 6.492 3.18 5.309 4.417 5.309 6.108 C 5.309 6.932 5.484 7.613 5.639 8.025 L 5.077 8.149 L 5.077 7.2 L 4.747 7.2 L 3.623 7.2 L 3.313 7.2 L 3.313 8.231 L 2.654 8.231 L 2.343 8.231 L 2.343 8.582 L 2.343 9.778 L 2.343 10.128 L 2.654 10.128 L 3.313 10.128 L 3.313 11.159 L 3.623 11.159 L 4.747 11.159 L 5.077 11.159 L 5.077 10.211 L 5.62 10.334 C 5.484 10.747 5.309 11.427 5.309 12.252 C 5.309 13.943 6.492 15.18 8.14 15.18 C 9.303 15.18 10.02 14.396 10.718 13.654 C 11.087 13.283 11.455 12.891 11.881 12.602 C 12.017 13.056 12.25 13.345 12.579 13.51 C 12.948 13.716 13.394 13.716 13.898 13.716 L 14.014 13.716 L 14.343 13.716 L 14.343 13.365 L 14.337 4.994 L 14.337 4.644 L 14.007 4.644 L 13.891 4.644 C 13.387 4.644 12.941 4.644 12.573 4.85 C 12.243 5.015 12.011 5.304 11.875 5.757 C 11.448 5.468 11.08 5.077 10.712 4.706 L 10.718 4.706 Z"></path>
</g>
""")

WINNER_NAG = ET.fromstring("""
<g id="winner" transform="scale(1.25)">
  <path class="icon-shadow" opacity="0.3" d="M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z"></path>
  <path class="icon-background" stroke="white" fill="#83b84f" d="M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z"></path>
  <path d="M 8.949 13.977 C 12.952 13.977 14.703 12.794 14.703 12.794 L 14.949 6.849 C 14.949 6.303 14.572 6.145 14.13 6.494 L 11.403 8.409 L 9.516 4.667 C 9.347 4.225 9.129 4.122 8.971 4.122 C 8.813 4.122 8.573 4.236 8.425 4.667 L 6.495 8.409 L 3.767 6.494 C 3.326 6.145 2.928 6.303 2.949 6.849 L 3.195 12.794 C 3.195 12.794 4.946 13.939 8.949 13.977 Z" fill="white" style="fill:#ffffff;fill-opacity:1)" id="path1"></path>
</g>
""")

CHECKMATE_NAG = ET.fromstring("""
<g id="checkmate" transform="scale(1.25)">
  <path class="icon-shadow" opacity="0.3" d="M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z"></path>
  <path class="icon-background" stroke="white" fill="black" d="M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z"></path>
  <text fill="white" x="3.50" y="14.5" font-size="35" transform="matrix(0.407178, 0, 0, 0.3, 2.532585, 8.549566)" font-weight="bold">#</text>
</g>
""")

DRAW_NAG = ET.fromstring("""
<g id="draw" transform="scale(1.25)">
  <path class="icon-shadow" opacity="0.3" d="M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z"></path>
  <path class="icon-background" stroke="white" fill="#555351" d="M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z"></path>
  <path class="icon-component" fill="white" d="M2.92,7V5.84c.81,0,1.75-.28,1.8-1.22H6.14v5.5H4.34V7Zm8.87-2.39L7,13.88H5l4.8-9.26ZM9.85,13.88c-.08-1.54,1.38-2.19,2.57-2.89.33-.17.78-.4.78-.78a.66.66,0,0,0-.68-.7c-.69,0-.94.58-.92,1.16H10a2.17,2.17,0,0,1,.64-1.79,2.74,2.74,0,0,1,1.91-.62C14.1,8.26,15,8.78,15,10c0,1.82-2.66,2.18-2.66,2.5h2.73v1.38Z"></path>
</g>
""")

HANGING_NAG = ET.fromstring("""
<g id="hanging" transform="scale(1.25)">
  <path class="icon-shadow" opacity="0.3" d="M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z"></path>
  <path class="icon-background" stroke="white" fill="#FFFDD0" d="M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z"></path>
  <g transform="matrix(0.15, 0, 0, 0.15, 1.37, 1.72)">
    <path fill="none" d="M44.608,37.764c-1.88-7.591-3.135-13.889-9.426-10.521c-0.863,0.462-1.776,1.086-2.703,1.831v0l-0.001,0    c-1.082,0.869-2.183,1.908-3.251,3.067c-0.022,0.024-0.044,0.048-0.066,0.071c-0.159,0.173-0.317,0.349-0.474,0.527    c-0.028,0.032-0.056,0.064-0.084,0.096c-0.156,0.178-0.31,0.358-0.464,0.54c-0.02,0.024-0.04,0.049-0.061,0.073    c-0.643,0.77-1.265,1.577-1.853,2.412c-0.047,0.067-0.095,0.133-0.141,0.2c-0.109,0.156-0.215,0.314-0.321,0.472    c-0.062,0.092-0.123,0.183-0.184,0.276c-0.098,0.149-0.194,0.299-0.29,0.449c-0.066,0.104-0.131,0.208-0.196,0.312    c-0.089,0.144-0.177,0.287-0.264,0.432c-0.069,0.115-0.136,0.231-0.204,0.347c-0.08,0.138-0.161,0.276-0.239,0.414    c-0.073,0.131-0.144,0.262-0.215,0.393c-0.068,0.126-0.138,0.251-0.204,0.377c-0.13,0.247-0.255,0.495-0.376,0.744    c-0.051,0.104-0.098,0.208-0.147,0.312c-0.075,0.159-0.15,0.318-0.221,0.477c-0.05,0.113-0.098,0.226-0.146,0.338    c-0.065,0.152-0.13,0.303-0.191,0.455c-0.046,0.114-0.09,0.227-0.134,0.34c-0.059,0.153-0.117,0.306-0.172,0.458    c-0.04,0.11-0.079,0.221-0.117,0.331c-0.055,0.16-0.106,0.319-0.156,0.478c-0.032,0.102-0.065,0.204-0.095,0.306    c-0.054,0.181-0.102,0.361-0.15,0.541c-0.021,0.079-0.044,0.158-0.064,0.237c-0.064,0.257-0.122,0.514-0.172,0.768    c-0.009,0.045-0.015,0.09-0.023,0.135c-0.039,0.21-0.075,0.418-0.104,0.626c-0.012,0.087-0.021,0.173-0.031,0.259    c-0.02,0.165-0.039,0.33-0.052,0.493c-0.008,0.095-0.013,0.19-0.018,0.285c-0.009,0.154-0.015,0.307-0.018,0.458    c-0.002,0.096-0.002,0.191-0.001,0.286c0.001,0.151,0.007,0.301,0.015,0.45c0.005,0.09,0.009,0.181,0.016,0.271    c0.013,0.16,0.032,0.318,0.053,0.475c0.01,0.075,0.017,0.151,0.029,0.226c0.037,0.229,0.081,0.455,0.136,0.677    c0,0.001,0,0.002,0,0.002c0.588,2.372,1.638,4.337,2.998,5.816c0.136,0.148,0.275,0.291,0.417,0.429    c0.284,0.276,0.579,0.532,0.885,0.768s0.623,0.451,0.948,0.645c2.769,1.651,6.205,1.778,9.547-0.012    c0.348-0.186,0.685-0.395,1.015-0.615c0.071-0.047,0.143-0.093,0.214-0.141c0.287-0.199,0.568-0.411,0.841-0.634    c0.119-0.096,0.235-0.195,0.351-0.296c0.176-0.153,0.349-0.312,0.519-0.475c0.219-0.209,0.432-0.425,0.64-0.648    c0.067-0.073,0.134-0.146,0.2-0.22c0.325-0.362,0.636-0.74,0.932-1.135l0,0C44.518,49.188,45.944,43.155,44.608,37.764z"></path>
    <path fill="none" d="M50,50.471c-0.696-0.792-6.65,9.182-6.65,11.28c0,0.431,0.075,0.844,0.208,1.23    c-0.131,0.485-0.208,0.89-0.208,1.171c0,2.542,1.7,4.603,3.798,4.603c1.138,0,2.156-0.609,2.852-1.57    c0.696,0.961,1.714,1.57,2.852,1.57c2.098,0,3.798-2.061,3.798-4.603c0-0.282-0.077-0.686-0.208-1.171    c0.132-0.386,0.208-0.799,0.208-1.23C56.65,59.653,50.696,49.678,50,50.471z"></path>
    <path fill="none" d="M77.554,47.119c-0.006-0.096-0.011-0.191-0.019-0.287c-0.013-0.162-0.032-0.326-0.052-0.489    c-0.011-0.087-0.019-0.174-0.032-0.262c-0.029-0.204-0.064-0.409-0.102-0.614c-0.009-0.049-0.016-0.098-0.025-0.147    c-0.05-0.254-0.108-0.51-0.172-0.767c-0.02-0.08-0.044-0.161-0.065-0.241c-0.047-0.178-0.095-0.356-0.148-0.535    c-0.031-0.104-0.065-0.209-0.098-0.313c-0.049-0.156-0.1-0.313-0.154-0.469c-0.039-0.113-0.079-0.225-0.12-0.338    c-0.054-0.15-0.111-0.3-0.169-0.45c-0.045-0.116-0.09-0.232-0.137-0.348c-0.06-0.149-0.124-0.298-0.188-0.446    c-0.05-0.116-0.098-0.231-0.15-0.346c-0.069-0.154-0.142-0.307-0.214-0.461c-0.052-0.11-0.101-0.219-0.155-0.329    c-0.12-0.247-0.245-0.494-0.374-0.74c-0.068-0.13-0.14-0.259-0.21-0.388c-0.069-0.128-0.138-0.255-0.209-0.383    c-0.079-0.141-0.162-0.282-0.244-0.422c-0.065-0.112-0.131-0.225-0.198-0.336c-0.088-0.148-0.178-0.294-0.269-0.441    c-0.063-0.101-0.126-0.202-0.19-0.303c-0.097-0.153-0.196-0.306-0.296-0.458c-0.058-0.088-0.116-0.175-0.175-0.262    c-0.109-0.162-0.217-0.323-0.329-0.484c-0.044-0.063-0.089-0.125-0.133-0.188c-0.591-0.84-1.216-1.653-1.864-2.427    c-0.018-0.022-0.036-0.044-0.054-0.065c-0.155-0.185-0.311-0.366-0.469-0.546c-0.027-0.03-0.053-0.061-0.08-0.091    c-0.158-0.18-0.317-0.356-0.477-0.531c-0.021-0.023-0.042-0.045-0.063-0.068c-1.069-1.16-2.171-2.199-3.253-3.069l0,0v0    c-0.928-0.745-1.841-1.369-2.703-1.831c-6.291-3.369-7.546,2.929-9.426,10.521c-1.335,5.391,0.09,11.424,3.276,15.681v0    c0,0,0.001,0.001,0.001,0.001c0.296,0.395,0.606,0.772,0.931,1.134c0.066,0.074,0.133,0.148,0.201,0.22    c0.208,0.223,0.42,0.439,0.639,0.648c0.17,0.163,0.343,0.322,0.519,0.476c0.116,0.1,0.232,0.199,0.35,0.295    c0.273,0.223,0.553,0.435,0.841,0.634c0.07,0.049,0.142,0.094,0.214,0.141c0.33,0.219,0.667,0.428,1.015,0.614    c6.291,3.369,12.915-0.055,14.795-7.646c0.055-0.222,0.099-0.449,0.136-0.679c0.012-0.075,0.019-0.152,0.03-0.228    c0.021-0.156,0.04-0.313,0.053-0.472c0.007-0.09,0.011-0.181,0.016-0.272c0.008-0.149,0.014-0.299,0.015-0.45    c0.001-0.095,0-0.191-0.001-0.287C77.57,47.424,77.563,47.272,77.554,47.119z"></path>
    <path d="M67.386,81.159c-1.849,0-3.463,0.995-4.346,2.475c-0.884-1.481-2.497-2.475-4.347-2.475s-3.463,0.995-4.346,2.475    c-0.884-1.481-2.497-2.475-4.346-2.475c-1.85,0-3.463,0.995-4.346,2.475c-0.884-1.481-2.497-2.475-4.346-2.475    c-1.85,0-3.463,0.995-4.346,2.475c-0.884-1.481-2.497-2.475-4.346-2.475c-2.797,0-5.064,2.267-5.064,5.064v3.713    c0,2.797,2.267,5.064,5.064,5.064h34.772c2.797,0,5.064-2.267,5.064-5.064v-3.713C72.45,83.426,70.183,81.159,67.386,81.159z"></path>
    <path d="M84.889,40.053c1.556-3.457,2.414-7.202,2.414-11.117c0-0.015,0-0.029,0-0.044C87.282,15.686,76.574,5,63.368,5H36.632    C23.43,5,12.718,15.69,12.697,28.892c0,0.015,0,0.029,0,0.044c0,3.915,0.859,7.661,2.415,11.117    c-2.76,2.654-4.44,6.149-4.44,9.982c0,8.103,7.498,14.704,16.88,15.008v5.313c0,2.797,2.267,5.064,5.064,5.064    c1.85,0,3.463-0.995,4.346-2.475c0.884,1.481,2.497,2.475,4.346,2.475c1.849,0,3.463-0.995,4.346-2.475    c0.884,1.481,2.497,2.475,4.346,2.475c1.849,0,3.463-0.995,4.346-2.475c0.884,1.481,2.497,2.475,4.346,2.475    c1.849,0,3.463-0.995,4.346-2.475c0.884,1.481,2.497,2.475,4.346,2.475c2.797,0,5.064-2.267,5.064-5.064v-5.313    c9.382-0.304,16.879-6.905,16.879-15.008C89.329,46.203,87.649,42.707,84.889,40.053z M41.332,53.445    c-0.296,0.395-0.607,0.773-0.932,1.135c-0.066,0.074-0.133,0.147-0.2,0.22c-0.208,0.223-0.42,0.44-0.64,0.648    c-0.17,0.163-0.342,0.322-0.519,0.475c-0.116,0.1-0.232,0.2-0.351,0.296c-0.273,0.223-0.553,0.435-0.841,0.634    c-0.07,0.049-0.142,0.094-0.214,0.141c-0.33,0.22-0.667,0.428-1.015,0.615c-3.342,1.79-6.778,1.662-9.547,0.012    c-0.326-0.194-0.642-0.409-0.948-0.645s-0.602-0.492-0.885-0.768c-0.142-0.138-0.281-0.281-0.417-0.429    c-1.359-1.478-2.41-3.443-2.998-5.816c0-0.001,0-0.002,0-0.002c-0.055-0.222-0.099-0.448-0.136-0.677    c-0.012-0.075-0.019-0.151-0.029-0.226c-0.021-0.157-0.04-0.315-0.053-0.475c-0.007-0.09-0.011-0.18-0.016-0.271    c-0.008-0.149-0.014-0.299-0.015-0.45c-0.001-0.095,0-0.19,0.001-0.286c0.003-0.152,0.009-0.305,0.018-0.458    c0.005-0.095,0.011-0.189,0.018-0.285c0.013-0.163,0.032-0.328,0.052-0.493c0.01-0.086,0.019-0.172,0.031-0.259    c0.029-0.207,0.065-0.416,0.104-0.626c0.008-0.045,0.014-0.09,0.023-0.135c0.05-0.255,0.108-0.511,0.172-0.768    c0.02-0.079,0.043-0.158,0.064-0.237c0.047-0.18,0.096-0.36,0.15-0.541c0.03-0.102,0.063-0.204,0.095-0.306    c0.05-0.159,0.102-0.318,0.156-0.478c0.038-0.11,0.077-0.22,0.117-0.331c0.055-0.153,0.113-0.305,0.172-0.458    c0.044-0.113,0.088-0.227,0.134-0.34c0.062-0.152,0.126-0.303,0.191-0.455c0.049-0.113,0.096-0.226,0.146-0.338    c0.071-0.159,0.146-0.318,0.221-0.477c0.049-0.104,0.096-0.208,0.147-0.312c0.121-0.248,0.247-0.497,0.376-0.744    c0.066-0.126,0.136-0.251,0.204-0.377c0.071-0.131,0.142-0.263,0.215-0.393c0.078-0.139,0.159-0.276,0.239-0.414    c0.068-0.116,0.135-0.232,0.204-0.347c0.087-0.145,0.175-0.288,0.264-0.432c0.065-0.104,0.13-0.208,0.196-0.312    c0.096-0.15,0.192-0.3,0.29-0.449c0.061-0.092,0.122-0.184,0.184-0.276c0.106-0.158,0.212-0.316,0.321-0.472    c0.047-0.067,0.094-0.133,0.141-0.2c0.588-0.835,1.209-1.643,1.853-2.412c0.02-0.024,0.04-0.049,0.061-0.073    c0.154-0.183,0.308-0.362,0.464-0.54c0.028-0.032,0.056-0.064,0.084-0.096c0.157-0.178,0.315-0.354,0.474-0.527    c0.022-0.024,0.044-0.048,0.066-0.071c1.068-1.159,2.169-2.197,3.251-3.067l0.001,0v0c0.928-0.745,1.841-1.369,2.703-1.831    c6.291-3.369,7.546,2.929,9.426,10.521C45.944,43.155,44.518,49.188,41.332,53.445L41.332,53.445z M56.65,64.152    c0,2.542-1.7,4.603-3.798,4.603c-1.138,0-2.156-0.609-2.852-1.57c-0.696,0.961-1.714,1.57-2.852,1.57    c-2.098,0-3.798-2.061-3.798-4.603c0-0.282,0.077-0.686,0.208-1.171c-0.132-0.386-0.208-0.799-0.208-1.23    c0-2.098,5.953-12.072,6.65-11.28c0.696-0.792,6.649,9.182,6.649,11.28c0,0.431-0.075,0.844-0.208,1.23    C56.573,63.466,56.65,63.87,56.65,64.152z M77.559,48.312c-0.005,0.091-0.009,0.182-0.016,0.272    c-0.013,0.159-0.032,0.316-0.053,0.472c-0.01,0.076-0.018,0.153-0.03,0.228c-0.037,0.229-0.081,0.456-0.136,0.679    c-1.88,7.591-8.504,11.014-14.795,7.646c-0.348-0.186-0.684-0.395-1.015-0.614c-0.071-0.047-0.143-0.093-0.214-0.141    c-0.288-0.199-0.568-0.411-0.841-0.634c-0.119-0.096-0.234-0.195-0.35-0.295c-0.177-0.154-0.349-0.313-0.519-0.476    c-0.219-0.208-0.431-0.425-0.639-0.648c-0.068-0.073-0.134-0.146-0.201-0.22c-0.325-0.362-0.635-0.739-0.931-1.134    c0,0-0.001-0.001-0.001-0.001v0c-3.186-4.257-4.611-10.29-3.276-15.681c1.88-7.591,3.135-13.889,9.426-10.521    c0.863,0.462,1.776,1.086,2.703,1.831v0l0,0c1.083,0.87,2.185,1.909,3.253,3.069c0.021,0.023,0.042,0.045,0.063,0.068    c0.16,0.174,0.319,0.351,0.477,0.531c0.027,0.03,0.053,0.061,0.08,0.091c0.157,0.18,0.314,0.361,0.469,0.546    c0.018,0.022,0.036,0.043,0.054,0.065c0.647,0.774,1.273,1.587,1.864,2.427c0.044,0.063,0.089,0.125,0.133,0.188    c0.111,0.16,0.22,0.322,0.329,0.484c0.059,0.087,0.117,0.174,0.175,0.262c0.1,0.152,0.198,0.305,0.296,0.458    c0.064,0.101,0.127,0.202,0.19,0.303c0.091,0.147,0.181,0.293,0.269,0.441c0.067,0.112,0.132,0.224,0.198,0.336    c0.082,0.141,0.164,0.281,0.244,0.422c0.072,0.127,0.14,0.255,0.209,0.383c0.07,0.129,0.142,0.258,0.21,0.388    c0.129,0.246,0.254,0.492,0.374,0.74c0.053,0.109,0.103,0.219,0.155,0.329c0.072,0.154,0.145,0.307,0.214,0.461    c0.052,0.115,0.1,0.231,0.15,0.346c0.064,0.149,0.127,0.297,0.188,0.446c0.047,0.116,0.092,0.232,0.137,0.348    c0.058,0.15,0.114,0.3,0.169,0.45c0.041,0.113,0.081,0.225,0.12,0.338c0.054,0.157,0.104,0.313,0.154,0.469    c0.033,0.104,0.067,0.209,0.098,0.313c0.053,0.179,0.101,0.357,0.148,0.535c0.021,0.08,0.045,0.161,0.065,0.241    c0.064,0.257,0.121,0.513,0.172,0.767c0.01,0.049,0.016,0.098,0.025,0.147c0.038,0.206,0.073,0.411,0.102,0.614    c0.012,0.088,0.021,0.175,0.032,0.262c0.02,0.164,0.038,0.327,0.052,0.489c0.008,0.096,0.013,0.191,0.019,0.287    c0.009,0.153,0.015,0.305,0.018,0.456c0.002,0.096,0.002,0.192,0.001,0.287C77.572,48.014,77.567,48.163,77.559,48.312z"></path>
  </g>
</g>
""")

CHECK_GRADIENT = ET.fromstring("""<radialGradient id="check_gradient" r="0.5"><stop offset="0%" stop-color="#ff0000" stop-opacity="1.0" /><stop offset="50%" stop-color="#e70000" stop-opacity="1.0" /><stop offset="100%" stop-color="#9e0000" stop-opacity="0.0" /></radialGradient>""")

DEFAULT_COLORS = {
  "square light": "#ffce9e",
  "square dark": "#d18b47",
  "square dark lastmove": "#aaa23b",
  "square light lastmove": "#cdd16a",
  "margin": "#212121",
  "coord": "#e5e5e5",
  "arrow green": "#9fcf3fa3",
  "arrow red": "#f8553fa3",
  "arrow yellow": "#ffaa00a3",
  "arrow blue": "#48c1f9a3",
  "arrow light": "#4a4a4a33"
}

DEFAULT_COLORS["red"] = DEFAULT_COLORS["arrow red"]
DEFAULT_COLORS["green"] = DEFAULT_COLORS["arrow green"]
DEFAULT_COLORS["yellow"] = DEFAULT_COLORS["arrow yellow"]
DEFAULT_COLORS["blue"] = DEFAULT_COLORS["arrow blue"]

class Arrow:
  """Details of an arrow to be drawn."""

  tail: Square
  """Start square of the arrow."""

  head: Square
  """End square of the arrow."""

  color: str
  """Arrow color."""

  def __init__(self, tail: Square, head: Square, *, color: str = "green") -> None:
    self.tail = tail
    self.head = head
    self.color = color

  def pgn(self) -> str:
    """
    Returns the arrow in the format used by ``[%csl ...]`` and
    ``[%cal ...]`` PGN annotations, e.g., ``Ga1`` or ``Ya2h2``.

    Colors other than ``red``, ``yellow``, and ``blue`` default to green.
    """
    if self.color == "red":
      color = "R"
    elif self.color == "yellow":
      color = "Y"
    elif self.color == "blue":
      color = "B"
    elif self.color == "light":
      color = "L"
    else:
      color = "G"

    if self.tail == self.head:
      return f"{color}{chess.SQUARE_NAMES[self.tail]}"
    else:
      return f"{color}{chess.SQUARE_NAMES[self.tail]}{chess.SQUARE_NAMES[self.head]}"

  def __str__(self) -> str:
    return self.pgn()

  def __repr__(self) -> str:
    return f"Arrow({chess.SQUARE_NAMES[self.tail].upper()}, {chess.SQUARE_NAMES[self.head].upper()}, color={self.color!r})"

  @classmethod
  def from_pgn(cls, pgn: str) -> Self:
    """
    Parses an arrow from the format used by ``[%csl ...]`` and
    ``[%cal ...]`` PGN annotations, e.g., ``Ga1`` or ``Ya2h2``.

    Also allows skipping the color prefix, defaulting to green.

    :raises: :exc:`ValueError` if the format is invalid.
    """
    if pgn.startswith("G"):
      color = "green"
      pgn = pgn[1:]
    elif pgn.startswith("R"):
      color = "red"
      pgn = pgn[1:]
    elif pgn.startswith("Y"):
      color = "yellow"
      pgn = pgn[1:]
    elif pgn.startswith("B"):
      color = "blue"
      pgn = pgn[1:]
    elif pgn.startswith("L"):
      color = "light"
      pgn = pgn[1:]
    else:
      color = "green"

    tail = chess.parse_square(pgn[:2])
    head = chess.parse_square(pgn[2:]) if len(pgn) > 2 else tail
    return cls(tail, head, color=color)

def _svg(viewbox: int, size: Optional[int|float]) -> ET.Element:
  svg = ET.Element("svg", {
    "xmlns": "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    "viewBox": f"0 0 {viewbox:d} {viewbox:d}",
  })

  if size is not None:
    svg.set("width", str(size))
    svg.set("height", str(size))

  return svg

def _attrs(attrs: Dict[str, Union[str, int, float, None]]) -> Dict[str, str]:
  return {k: str(v) for k, v in attrs.items() if v is not None}

def _select_color(colors: Dict[str, str], color: str) -> Tuple[str, float]:
  return _color(colors.get(color, DEFAULT_COLORS[color]))

def _color(color: str) -> Tuple[str, float]:
  if color.startswith("#"):
    try:
      if len(color) == 5:
        return color[:4], int(color[4], 16) / 0xf
      elif len(color) == 9:
        return color[:7], int(color[7:], 16) / 0xff
    except ValueError:
      pass  # Ignore invalid hex value
  return color, 1.0

def _coord(text: str, x: float, y: float, scale: float, *, color: str, opacity: float) -> ET.Element:
  t = ET.Element("g", _attrs({
    "transform": f"translate({x}, {y}) scale({scale}, {scale})",
    "fill": color,
    "stroke": color,
    "opacity": opacity if opacity < 1.0 else None,
  }))
  t.append(COORDS[text])
  return t

def piece(piece: chess.Piece, size: Optional[int] = None) -> str:
  """
  Renders the given :class:`chess.Piece` as an SVG image.

  >>> import chess
  >>> import chess.svg
  >>>
  >>> chess.svg.piece(chess.Piece.from_symbol("R"))  # doctest: +SKIP

  .. image:: ../docs/wR.svg
    :alt: R
  """
  svg = _svg(SQUARE_SIZE, size)
  svg.append(PIECES[piece.symbol()])
  return ET.tostring(svg).decode("utf-8")

def board_coords(sqr: chess.Square, orientation: bool):
  file, rank = chess.square_file(sqr), chess.square_rank(sqr)
  file = file if orientation else 7 - file 
  rank = 7 - rank if orientation else rank
  return file, rank

def svg_coords(sqr, orientation):
  file, rank = board_coords(sqr, orientation)
  x, y = file * SQUARE_SIZE, rank * SQUARE_SIZE
  return x, y

def animate_move(move, orientation, progress):
  from_file = chess.square_file(move.from_square)
  from_rank = chess.square_rank(move.from_square)
  to_file = chess.square_file(move.to_square)
  to_rank = chess.square_rank(move.to_square)
  current_file = from_file + (to_file - from_file) * progress
  current_rank = from_rank + (to_rank - from_rank) * progress
  x = (current_file if orientation else 7 - current_file) * SQUARE_SIZE
  y = (7 - current_rank if orientation else current_rank) * SQUARE_SIZE
  return x, y

def castling_moves(board: chess.Board, lastmove: chess.Move):
  """Returns the corresponding rook move for a castling move in standard chess and Chess960."""
  king_start = lastmove.from_square
  king_end = lastmove.to_square
  rank = chess.square_rank(king_end)  # 0 for White, 7 for Black

  king_file = chess.square_file(king_start)

  # Determine if it's kingside or queenside castling
  is_kingside = king_end > king_start  # King moves right → Kingside castling

  # Get the rook's starting square dynamically
  rank = chess.square_rank(lastmove.to_square)

  # Find the rook's starting square by looking at the occupied squares
  rooks = board.pieces(chess.ROOK, board.turn)  # Get all rooks of the current player
  rook_start = None
  for rook_sq in rooks:
    rook_file = chess.square_file(rook_sq)
    if (is_kingside and rook_file > king_file) or \
       (not is_kingside and rook_file < king_file):
      rook_start = rook_sq
      break

  if rook_start is None:
    raise ValueError("No valid rook found for castling")

# Correcting rook and king destination squares
  if rank == 0:  # White castling
    rook_end = chess.F1 if is_kingside else chess.D1
    king_end = chess.G1 if is_kingside else chess.C1
  else:  # Black castling
    rook_end = chess.F8 if is_kingside else chess.D8
    king_end = chess.G8 if is_kingside else chess.C8

  return chess.Move(king_start, king_end), chess.Move(rook_start, rook_end)

def hanging_pieces(board: chess.Board):
  for sq in chess.SQUARES:
    piece = board.piece_at(sq)
    if piece is None:
      continue
    attackers = board.attackers(not piece.color, sq)  # Opponent's attackers
    defenders = board.attackers(piece.color, sq)  # Own defenders
    if len(attackers) > len(defenders):  # More attackers than defenders
      yield sq

def board(board: chess.Board, *,
          orientation: Color = chess.WHITE,
          lastmove: Optional[chess.Move] = None,
          cals: List[Arrow] = [],
          csls: List[Arrow] = [],
          size: Optional[int|float] = None,
          coordinates: bool = True,
          colors: Dict[str, str] = {},
          style: Optional[str] = None,
          nag:Optional[int] = None ,
          result: None | str = None):
  """
  Renders a board with pieces and/or selected squares as an SVG image.

  :param board: A :class:`chess.BaseBoard` for a chessboard with pieces, or
    ``None`` (the default) for a chessboard without pieces.
  :param orientation: The point of view, defaulting to ``chess.WHITE``.
  :param lastmove: A :class:`chess.Move` to be highlighted.
  :param check: A square to be marked indicating a check.
  :param arrows: A list of :class:`~chess.svg.Arrow` objects, like
    ``[chess.svg.Arrow(chess.E2, chess.E4)]``, or a list of tuples, like
    ``[(chess.E2, chess.E4)]``. An arrow from a square pointing to the same
    square is drawn as a circle, like ``[(chess.E2, chess.E2)]``.
  :param squares: A :class:`chess.SquareSet` with selected squares to mark
    with an X.
  :param size: The size of the image in pixels (e.g., ``400`` for a 400 by
    400 board), or ``None`` (the default) for no size limit.
  :param coordinates: Pass ``False`` to disable the coordinate margin.
  :param colors: A dictionary to override default colors. Possible keys are
    ``square light``, ``square dark``, ``square light lastmove``,
    ``square dark lastmove``, ``margin``, ``coord``, ``inner border``,
    ``outer border``, ``arrow green``, ``arrow blue``, ``arrow red``,
    and ``arrow yellow``. Values should look like ``#ffce9e`` (opaque),
    or ``#15781B80`` (transparent).
  :param flipped: Pass ``True`` to flip the board.
  :param style: A CSS stylesheet to include in the SVG image.
  :param nag: Pass ``NAG Constant`` to show Numerical Notation Glyphs (NAGs).
    Supports !(great), !!(brilliant), ?(mistake), ?!(inaccuracy) and ??(blunder)
    (requires ``lastmove`` to be passed along as argument)

  >>> import chess
  >>> import chess.svg
  >>>
  >>> board = chess.Board("8/8/8/8/4N3/8/8/8 w - - 0 1")
  >>>
  >>> chess.svg.board(
  ...     board,
  ...     fill=dict.fromkeys(board.attacks(chess.E4), "#cc0000cc"),
  ...     arrows=[chess.svg.Arrow(chess.E4, chess.F6, color="#0000cccc")],
  ...     squares=chess.SquareSet(chess.BB_DARK_SQUARES & chess.BB_FILE_B),
  ...     size=350,
  ... )  # doctest: +SKIP

  .. image:: ../docs/Ne4.svg
    :alt: 8/8/8/8/4N3/8/8/8

  .. deprecated:: 1.1
    Use *orientation* with a color instead of the *flipped* toggle.
  """
  full_size = 8 * SQUARE_SIZE
  svg = _svg(full_size, size)
  desc = ET.SubElement(svg, "desc")
  defs = ET.SubElement(svg, "defs")

  if style:
    ET.SubElement(svg, "style").text = style

  render_board(svg, colors, orientation)
  
  if lastmove is not None:
    highlight_lastmove(svg, lastmove, colors, orientation)

  # Render check mark
  if board.is_check():
    render_check(svg, board, orientation)

  asciiboard = ET.SubElement(desc, "pre")
  asciiboard.text = str(board)
  add_defs(defs)  
  
  render_pieces(svg, board, orientation)

  if coordinates:
    render_coords(svg, colors, orientation)

  for sqr in csls:
    highlight_sqr(svg, sqr, colors, orientation)

  for arrow in cals:
    render_arrow(svg, arrow, colors, orientation)

  if nag is not None and \
     lastmove is not None and \
     NAGS.get(str(nag), None) is not None:
    render_nag(svg, defs, nag, lastmove, orientation)
  
  if result is not None:
    render_result(svg, board, defs, result, orientation)

  return ET.tostring(svg).decode("utf-8")

def render_result(svg: ET.Element, board: chess.Board, defs: ET.Element, result: str, orientation: bool):
  white_king = board.king(chess.WHITE)
  black_king = board.king(chess.BLACK)
  assert white_king is not None, "No White King on the board"
  assert black_king is not None, "No Black King on the board"
  if result == "0-1" or result == "1-0":
    defs.append(WINNER_NAG)
    defs.append(LOOSER_NAG)
    defs.append(CHECKMATE_NAG)
    looser_nag = CHECKMATE_NAG if board.is_checkmate() else LOOSER_NAG
    king_sqrs = [(white_king, looser_nag), (black_king, WINNER_NAG)] if result == "0-1" else \
                [(white_king, WINNER_NAG), (black_king, looser_nag)]
  else:
    defs.append(DRAW_NAG)
    king_sqrs = [(white_king, DRAW_NAG), (black_king, DRAW_NAG)]

  for king_sqr, nag_glyph in king_sqrs:
    file, rank = board_coords(king_sqr, orientation)
    x, y = file * SQUARE_SIZE, rank * SQUARE_SIZE 
    x += POSITION_OFFSET + CORNER_OFFSET
    y -= CORNER_OFFSET
    if file == 7:
      x -= CORNER_OFFSET
    if rank == 0:
      y += CORNER_OFFSET
    id = nag_glyph.attrib.get("id")
    ET.SubElement(svg, "use", _attrs({
      "href": f"#{id}",
      "xlink:href": f"#{id}",
      "x": x,
      "y": y,
    }))

def render_coords(svg: ET.Element, colors: dict[str, str], orientation: bool):
  full_size = 8 * SQUARE_SIZE
  light_color, light_opacity = _select_color(colors, "square light")
  dark_color, dark_opacity = _select_color(colors, "square dark")
  text_scale = 0.5
  coord_size = 18
  width = coord_size * text_scale
  height = coord_size * text_scale
  x, to_file = 0, 0
  for to_file, file_name in enumerate(chess.FILE_NAMES):
    x = ((to_file if orientation else 7 - to_file) * SQUARE_SIZE) - width # type: ignore
    y = full_size - height # type: ignore
    coord_color, coord_opacity = (light_color, light_opacity) if (to_file+orientation)%2 == 1 else (dark_color, dark_opacity)
    svg.append(_coord(file_name, x+1.5, y-1, text_scale, color=coord_color, opacity=coord_opacity))
  x += (7 - to_file if orientation else to_file) * SQUARE_SIZE
  x += SQUARE_SIZE
  for to_rank, rank_name in enumerate(chess.RANK_NAMES):
    y = ((7 - to_rank if orientation else to_rank) * SQUARE_SIZE) - height # type: ignore
    coord_color, coord_opacity = (dark_color, dark_opacity) if (to_rank+orientation)%2 == 1 else (light_color, light_opacity)
    svg.append(_coord(rank_name, x-1, y+3, text_scale, color=coord_color, opacity=coord_opacity))

def render_board(svg: ET.Element, colors: dict[str, str], orientation: bool):
  for square, bb in enumerate(chess.BB_SQUARES):
    x, y = svg_coords(square, orientation)
    cls = ["square", "light" if chess.BB_LIGHT_SQUARES & bb else "dark"]
    square_color, square_opacity = _select_color(colors, " ".join(cls))
    cls.append(chess.SQUARE_NAMES[square])
    ET.SubElement(svg, "rect", _attrs({
      "x": x,
      "y": y,
      "width": SQUARE_SIZE,
      "height": SQUARE_SIZE,
      "class": " ".join(cls),
      "stroke": "none",
      "fill": square_color,
      "opacity": square_opacity if square_opacity < 1.0 else None,
    }))

def add_defs(defs: ET.Element):
  # Pieces
  for piece_color in chess.COLORS:
    for piece_type in chess.PIECE_TYPES:
      defs.append(PIECES[chess.Piece(piece_type, piece_color).symbol()])
  # Hanging Glyph
  defs.append(HANGING_NAG)
  # Check Gradient
  defs.append(CHECK_GRADIENT)

def highlight_lastmove(svg: ET.Element, lastmove: chess.Move, colors: dict[str, str], orientation: bool):
  for square in (lastmove.from_square, lastmove.to_square):
    bb = 1 << square
    x, y = svg_coords(square, orientation)
    cls = ["square", "light" if chess.BB_LIGHT_SQUARES & bb else "dark", "lastmove"]
    square_color, square_opacity = _select_color(colors, " ".join(cls))
    cls.append(chess.SQUARE_NAMES[square])
    ET.SubElement(svg, "rect", _attrs({
      "x": x,
      "y": y,
      "width": SQUARE_SIZE,
      "height": SQUARE_SIZE,
      "class": " ".join(cls),
      "stroke": "none",
      "fill": square_color,
      "opacity": "0.7",
    }))

def render_check(svg: ET.Element, board: chess.Board, orientation: bool):
  king_sqr = board.king(board.turn)
  assert king_sqr is not None, "king_sqr must exist"
  x, y = svg_coords(king_sqr, orientation)
  ET.SubElement(svg, "rect", _attrs({
    "x": x,
    "y": y,
    "width": SQUARE_SIZE,
    "height": SQUARE_SIZE,
    "class": "check",
    "fill": "url(#check_gradient)",
  }))

def render_pieces(svg: ET.Element, board: chess.Board, orientation: bool):
  for square, _ in enumerate(chess.BB_SQUARES):
    piece = board.piece_at(square)
    if not piece:
      continue
    x, y = svg_coords(square, orientation)
    href = f"#{chess.COLOR_NAMES[piece.color]}-{chess.PIECE_NAMES[piece.piece_type]}"
    ET.SubElement(svg, "use", {
      "href": href,
      "xlink:href": href,
      "id": f"{x}_{y}",
      "transform": f"translate({x:d}, {y:d})",
    })

def render_nag(svg: ET.Element, defs: ET.Element, nag: int, lastmove: chess.Move, orientation: bool):
  ele = NAGS[str(nag)]
  defs.append(ele)
  id = ele.attrib.get("id")
  to_file, to_rank = board_coords(lastmove.to_square, orientation)
  x, y = to_file * SQUARE_SIZE, to_rank * SQUARE_SIZE
  # Making sure the NAGs doesn't overlap the Last Move Arrow by switching 
  # between appropriate corners depending upon where the Arrow is coming from.
  x += POSITION_OFFSET  # Top-right corner
  x += CORNER_OFFSET
  if to_file == 7:
    x -= CORNER_OFFSET
  y -= CORNER_OFFSET
  if to_rank == 0:
    y += CORNER_OFFSET
  ET.SubElement(svg, "use", _attrs({
    "href": f"#{id}",
    "xlink:href": f"#{id}",
    "id": "nag_",
    "x": x,
    "y": y,
  }))

def render_arrow(svg: ET.Element, arrow: Arrow, colors: dict[str, str], orientation: bool):
  try:
    tail, head, color = arrow.tail, arrow.head, arrow.color  # type: ignore
  except AttributeError:
    tail, head = arrow  # type: ignore
    color = "green"

  try:
    color, opacity = _select_color(colors, " ".join(["arrow", color]))
  except KeyError:
    opacity = 1.0

  tail_file = chess.square_file(tail)
  tail_rank = chess.square_rank(tail)
  head_file = chess.square_file(head)
  head_rank = chess.square_rank(head)

  xtail = (tail_file + 0.5 if orientation else 7.5 - tail_file) * SQUARE_SIZE
  ytail = (7.5 - tail_rank if orientation else tail_rank + 0.5) * SQUARE_SIZE
  xhead = (head_file + 0.5 if orientation else 7.5 - head_file) * SQUARE_SIZE
  yhead = (7.5 - head_rank if orientation else head_rank + 0.5) * SQUARE_SIZE

  marker_size = 0.40 * SQUARE_SIZE
  marker_margin = 0.1 * SQUARE_SIZE

  dx, dy = xhead - xtail, yhead - ytail
  hypot = math.hypot(dx, dy)

  shaft_x = xhead - dx * (marker_size + marker_margin) / hypot
  shaft_y = yhead - dy * (marker_size + marker_margin) / hypot

  xtip = xhead - dx * marker_margin / hypot
  ytip = yhead - dy * marker_margin / hypot

  ET.SubElement(svg, "line", _attrs({
    "x1": xtail,
    "y1": ytail,
    "x2": shaft_x,
    "y2": shaft_y,
    "stroke": color,
    "opacity": opacity if opacity < 1.0 else None,
    "stroke-width": SQUARE_SIZE * 0.15,
    "stroke-linecap": "butt",
    "class": "arrow",
  }))

  marker = [
    (xtip, ytip),
    (shaft_x + dy * 0.60 * marker_size / hypot,
      shaft_y - dx * 0.60 * marker_size / hypot),
    (shaft_x - dy * 0.60 * marker_size / hypot,
      shaft_y + dx * 0.60 * marker_size / hypot)]

  ET.SubElement(svg, "polygon", _attrs({
    "points": " ".join(f"{x},{y}" for x, y in marker),
    "fill": color,
    "opacity": opacity if opacity < 1.0 else None,
    "class": "arrow",
  }))

def generate_animation_frames(svg: ET.Element, board: chess.Board, lastmove: chess.Move, orientation: bool, nframes: int):
  from_file, from_rank = board_coords(lastmove.from_square, orientation)
  x, y = from_file * SQUARE_SIZE, from_rank * SQUARE_SIZE
  from_piece = svg.find(f".//use[@id='{x}_{y}']")
  assert from_piece is not None, "from_piece must exist"
  
  nag_glyph = svg.find(f".//use[@id='nag_']")

  to_file, to_rank = board_coords(lastmove.to_square, orientation)
  x, y = to_file * SQUARE_SIZE, to_rank * SQUARE_SIZE
  to_piece = svg.find(f".//use[@id='{x}_{y}']")

  rook_piece, rook_move = None, None
  if board.is_castling(lastmove):
    lastmove, rook_move = castling_moves(board, lastmove)
    x, y = svg_coords(rook_move.from_square, orientation)
    rook_piece = svg.find(f".//use[@id='{x}_{y}']")

  transition_start = 1 - (1/nframes)

  frames_list = []
  for i in range(0, nframes):
    progress = i / nframes
    transition_progress = (1 - math.cos(math.pi * progress)) / 2 
    x, y = animate_move(lastmove, orientation, transition_progress)
    from_piece.set("transform", f"translate({x:.2f}, {y:.2f})")
    opacity = max(0, (progress - transition_start) / (1 - transition_start))
    if to_piece is not None:
      to_piece.set("opacity", f"{(1-opacity):.2f}")
    if nag_glyph is not None:
      nag_glyph.set("opacity", f"{opacity:.2f}")
    if rook_piece is not None:
      assert rook_move is not None, "rook_move must exist"
      x, y = animate_move(rook_move, orientation, transition_progress)
      rook_piece.set("transform", f"translate({x:.2f}, {y:.2f})")
    frames_list.append(ET.tostring(svg).decode("utf-8"))

  return frames_list

def highlight_sqr(svg: ET.Element, arrow: Arrow, colors: dict[str, str], orientation: bool):
  fill_color, fill_opacity = _select_color(colors, arrow.color)
  x,y = svg_coords(arrow.tail, orientation)
  ET.SubElement(svg, "rect", _attrs({
      "x": x,
      "y": y,
      "width": SQUARE_SIZE,
      "height": SQUARE_SIZE,
      "stroke": "none",
      "fill": fill_color,
      "opacity": fill_opacity if fill_opacity < 1.0 else None,
  }))

class SVGBoard:
  svg: ET.Element
  defs: ET.Element
  orientation: bool
  colors: Dict[str, str]
  animation_frames_per_square: int

  def __init__(self, size: int|float,
                     show_coords: bool = True,
                     orientation: bool = chess.WHITE,
                     colors: Dict[str, str] = {},
                     style: Optional[str] = None):
    self.colors = colors
    self.orientation = orientation
    full_size = 8 * SQUARE_SIZE
    self.svg = _svg(full_size, size)
    self.defs = ET.Element("defs")

    if style:
      ET.SubElement(self.svg, "style").text = style

    render_board(self.svg, colors, self.orientation)

    add_defs(self.defs)
    
    # Render coordinates
    if show_coords:
      render_coords(self.svg, colors, self.orientation)


  def render(self, board: chess.Board, cals: List[Arrow] = [], csls: List[Arrow] = [], nag: Optional[int] = None, result: str|None = None) -> str:
    svg = copy(self.svg)
    defs = copy(self.defs)
    svg.append(defs)
    
    lastmove = board.move_stack[-1] if board.move_stack else None
    if lastmove:
      highlight_lastmove(svg, lastmove, self.colors, self.orientation)
    
    for arrow in csls:
      highlight_sqr(svg, arrow, self.colors, self.orientation)
  
    if board.is_check():
      render_check(svg, board, self.orientation)

    render_pieces(svg, board, self.orientation)

    for arrow in cals:
      render_arrow(svg, arrow, self.colors, self.orientation)
  
    if nag is not None and \
       lastmove is not None and \
       NAGS.get(str(nag), None) is not None:
      render_nag(svg, defs, nag, lastmove, self.orientation)

    if result is not None:
      render_result(svg, board, defs, result, self.orientation)

    return ET.tostring(svg).decode("utf-8")


  def animate(self, board: chess.Board, nframes: int, nag: Optional[int] = None) -> list[str]:
    svg = copy(self.svg)
    defs = copy(self.defs)
    svg.append(defs)

    lastmove = board.pop()
    if lastmove:
      highlight_lastmove(svg, lastmove, self.colors, self.orientation)

    render_pieces(svg, board, self.orientation)

    if nag is not None and \
       lastmove is not None and \
       NAGS.get(str(nag), None) is not None:
      render_nag(svg, defs, nag, lastmove, self.orientation)

    # Generating animation frames
    if not board.piece_at(lastmove.from_square):
      return [self.render(board, nag=nag)]

    frames = generate_animation_frames(svg, board, lastmove, self.orientation, nframes)
    board.push(lastmove)
    return frames
